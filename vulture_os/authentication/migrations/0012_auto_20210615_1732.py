# Generated by Django 3.0.5 on 2021-06-15 17:32

import authentication.user_scope.models
import bson.objectid
from django.db import migrations, models
import django.db.models.deletion
import djongo.models.fields


user_scopes = {}

def save_user_scope(apps, schema_editor):
    portal_model = apps.get_model("authentication", "UserAuthentication")
    db_alias = schema_editor.connection.alias
    portal_objects = portal_model.objects.using(db_alias)

    for portal in portal_objects.all():
        user_scopes[portal.name] = portal.repo_attributes


def restore_user_scope(apps, schema_editor):
    scope_model = apps.get_model("authentication", "UserScope")
    portal_model = apps.get_model("authentication", "UserAuthentication")
    db_alias = schema_editor.connection.alias
    scope_objects = scope_model.objects.using(db_alias)
    portal_objects = portal_model.objects.using(db_alias)

    for portal_name, scope in user_scopes.items():
        user_scope = scope_objects.create(name=f"Scope {portal_name}")
        user_scope.repo_attributes = scope
        print(scope)
        user_scope.save()
        print(f"{user_scope} created")
        portal = portal_objects.get(name=portal_name)
        portal.user_scope = user_scope
        portal.save()
        print(f"{portal}' scope updated")


class Migration(migrations.Migration):

    dependencies = [
        ('services', '0032_auto_20210423_1539'),
        ('authentication', '0011_auto_20210504_2233'),
    ]

    operations = [
        migrations.CreateModel(
            name='RepoAttribute',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('condition_var_kind', models.TextField(choices=[('claim', 'Claim attribute'), ('repo', 'Repository attribute'), ('constant', 'Constant'), ('always', 'Always')], default='claim')),
                ('condition_var_name', models.TextField(default='email')),
                ('condition_criterion', models.TextField(choices=[('equals', 'equals to'), ('not equals', 'does not equal to'), ('exists', 'exists'), ('not exists', 'does not exist'), ('contains', 'contains'), ('not contains', 'does not contain'), ('startswith', 'starts with'), ('endswith', 'ends with')], default='equals')),
                ('condition_match', models.TextField(default='test@abcd.fr')),
                ('assignator', models.TextField(choices=[('=', 'set'), ('+=', 'append')], default='=')),
                ('action_var_name', models.TextField(default='admin')),
                ('action_var_kind', models.TextField(choices=[('constant', 'Constant value'), ('claim', 'Claim attribute'), ('repo', 'Repository attribute'), ('merge', 'Merge attribute as list'), ('claim_pref', 'Use claim, or repo attr if not present'), ('repo_pref', 'Use repo attr, or claim if not present')], default='constant')),
                ('action_var', models.TextField(default='true')),
            ],
        ),
        migrations.CreateModel(
            name='UserScope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='User scope', help_text='Custom object name', unique=True, verbose_name='Name')),
                ('repo_attributes', djongo.models.fields.ArrayField(default=None, help_text='Repo attributes whitelist, for re-use in SSO and ACLs', model_container=authentication.user_scope.models.RepoAttribute, model_form_class=authentication.user_scope.models.RepoAttributeForm, null=True, verbose_name='Create user scope')),
            ],
        ),
        migrations.RunPython(save_user_scope, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name='userauthentication',
            name='repo_attributes',
        ),
        migrations.AddField(
            model_name='openidrepository',
            name='user_scope',
            field=models.ForeignKey(help_text='Scope of user to construct', null=True,
                                    on_delete=django.db.models.deletion.PROTECT, to='authentication.UserScope',
                                    verbose_name="User's scope"),
        ),
        migrations.AddField(
            model_name='userauthentication',
            name='user_scope',
            field=models.ForeignKey(help_text='Scope of user to construct', null=True,
                                    on_delete=django.db.models.deletion.PROTECT, to='authentication.UserScope',
                                    verbose_name="User's scope"),
        ),
        migrations.RunPython(restore_user_scope, migrations.RunPython.noop),
    ]
