# Generated by Django 2.1.3 on 2019-04-01 07:58

import bson.objectid
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('applications', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessControl',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('name', models.SlugField(help_text='Friendly name', max_length=255, unique=True, verbose_name='Friendly name')),
                ('acls', models.TextField(default='')),
                ('rules', djongo.models.fields.JSONField(default=[])),
                ('reputation_tags', djongo.models.fields.JSONField(default=[], help_text='Reputation tags used in this configuration', verbose_name=models.SlugField(choices=[['attack', 'Attack']], default='attack'))),
            ],
        ),
        migrations.CreateModel(
            name='BaseRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='Authentication repository', help_text='Name of the authentication repository', unique=True)),
                ('subtype', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='LearningProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_name', models.TextField(default='', verbose_name='Backend name of this Learning Profile')),
                ('repo_name', models.TextField(default='', verbose_name='Authentication repository name of this Learning Profile')),
                ('login', models.TextField(default='', verbose_name='Login of user using this Learning Profile')),
                ('encrypted_name', models.TextField(default='')),
                ('encrypted_value', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='UserAuthentication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='Users authentication', help_text='Custom object name', unique=True, verbose_name='Name')),
                ('enable_tracking', models.BooleanField(default=True, help_text="If disable, Vulture won't give a cookie to anonymous users", verbose_name='Track anonymous connections')),
                ('auth_type', models.TextField(choices=[('form', 'HTML Form'), ('basic', 'Basic Authentication'), ('kerberos', 'Kerberos Authentication')], default='form', help_text='Type of authentication to ask from client', verbose_name='Authentication type')),
                ('auth_timeout', models.PositiveIntegerField(default=900, help_text='Expiration timeout of portal cookie', verbose_name='Disconnection timeout')),
                ('enable_timeout_restart', models.BooleanField(default=True, help_text='Restart timeout after a request', verbose_name='Reset timeout after a request')),
                ('enable_captcha', models.BooleanField(default=False, help_text='Ask a captcha validation', verbose_name='Enable captcha')),
                ('otp_max_retry', models.PositiveIntegerField(default=3, help_text='Maximum number of OTP retries until deauthentication', verbose_name='Retries numbers')),
                ('disconnect_url', models.TextField(default='/disconnect', help_text="Regex for the application disconnect page (ex: 'logout\\?sessid=.*'", verbose_name='Disconnect regex')),
                ('enable_disconnect_message', models.BooleanField(default=False, help_text='Display the disconnect template message instead of redirecting user.', verbose_name='Display the disconnect message from template')),
                ('enable_disconnect_portal', models.BooleanField(default=False, help_text='Also disconnect the user from the portal.', verbose_name='Destroy portal session on disconnect')),
                ('enable_registration', models.BooleanField(default=False, help_text='Enable users registration', verbose_name='Enable users registration by mail')),
                ('group_registration', models.TextField(default='', help_text='Group of ldap registered users', verbose_name='Add users in group (ldap)')),
                ('update_group_registration', models.BooleanField(default=False, help_text='Update group members', verbose_name='Update group members (ldap)')),
                ('portal_template', models.ForeignKey(help_text='Select the template to use for user authentication portal', null=True, on_delete=django.db.models.deletion.PROTECT, to='applications.portalTemplate', verbose_name='Portal template')),
            ],
        ),
        migrations.CreateModel(
            name='InternalRepository',
            fields=[
                ('baserepository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='authentication.BaseRepository')),
            ],
            bases=('authentication.baserepository',),
        ),
        migrations.CreateModel(
            name='KerberosRepository',
            fields=[
                ('baserepository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='authentication.BaseRepository')),
                ('realm', models.TextField(default='VULTUREPROJECT.ORG', help_text='Kerberos realm', verbose_name='Kerberos realm')),
                ('domain_realm', models.TextField(default='.vultureproject.org', help_text='Kerberos domain', verbose_name='Kerberos domain realm')),
                ('kdc', models.TextField(default='kdc1.vultureproject.org,kdc2.vultureproject.org', help_text='Kerberos Domain Controler(s).', verbose_name='KDC(s)')),
                ('admin_server', models.TextField(default='kdc1.vultureproject.org', help_text='Administration server host (Typically, the master Kerberos server).', verbose_name='Admin server')),
                ('krb5_service', models.TextField(default='vulture.vultureproject.org', help_text='Kerberos Service Name', verbose_name='KRB5 Service name')),
                ('keytab', models.FileField(help_text='Keytab of the service used to contact KDC.', max_length=1000, upload_to='tmp', verbose_name='Service keytab ')),
            ],
            bases=('authentication.baserepository',),
        ),
        migrations.CreateModel(
            name='LDAPRepository',
            fields=[
                ('baserepository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='authentication.BaseRepository')),
                ('host', models.TextField(help_text='IP Address of LDAP server', verbose_name='Host')),
                ('port', models.PositiveIntegerField(default=389, help_text='Listening port of LDAP server', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Port')),
                ('protocol', models.PositiveIntegerField(choices=[(3, 'LDAP v3'), (2, 'LDAP v2')], default=0, help_text='Version of your LDAP protocol', verbose_name='Protocol')),
                ('encryption_scheme', models.TextField(choices=[('none', 'None (usual port: 389)'), ('ldaps', 'LDAPS (usual port: 636)'), ('start-tls', 'Start-TLS (usual port: 389)')], default='none', help_text='LDAP encryption scheme', verbose_name='Encryption scheme')),
                ('connection_dn', models.TextField(help_text='DN used by Vulture to perform LDAP query', verbose_name='Service account DN')),
                ('dn_password', models.TextField(help_text='Password of service account', verbose_name='Service account password')),
                ('base_dn', models.TextField(help_text='Location in the directory from  which the LDAP search begins', verbose_name='Base DN')),
                ('user_scope', models.PositiveIntegerField(choices=[(0, 'base (the suffix entry only)'), (1, 'one (one level under suffix)'), (2, 'subtree (all levels under suffix)')], default=0, help_text='Deep of search operation', verbose_name='User search scope')),
                ('user_dn', models.TextField(help_text='Location in the directory from which the user LDAP search begins', verbose_name='User DN')),
                ('user_attr', models.TextField(default='uid', help_text='Attribute which identify user', verbose_name='User attribute')),
                ('user_filter', models.TextField(default='(objectclass=person)', help_text='Filter used to found user. Ex: (objectClass=person)', verbose_name='User search filter')),
                ('user_account_locked_attr', models.TextField(help_text='Filter used to identify if an  account is locked.  Ex: (lockoutTime>=1)', verbose_name='Account locked filter')),
                ('user_change_password_attr', models.TextField(help_text='Filter used to identify if an  account need to change its password. Ex:  (pwdLastSet=0)', verbose_name='Need change password  filter')),
                ('user_groups_attr', models.TextField(help_text="Attribute which contains user's group list", verbose_name='Group attribute')),
                ('user_mobile_attr', models.TextField(help_text="Attribute which contains user's mobile number", verbose_name='Mobile attribute')),
                ('user_email_attr', models.TextField(help_text="Attribute which contains user's email address", verbose_name='Email attribute')),
                ('group_scope', models.PositiveIntegerField(choices=[(0, 'base (the suffix entry only)'), (1, 'one (one level under suffix)'), (2, 'subtree (all levels under suffix)')], default=0, help_text='Deep of search operation', verbose_name='Group search scope')),
                ('group_dn', models.TextField(help_text='Location in the directory from which the group LDAP search begins', verbose_name='Group DN')),
                ('group_attr', models.TextField(default='cn', help_text='Attribute which identify group', verbose_name='Group attribute')),
                ('group_filter', models.TextField(default='(objectClass=groupOfNames)', help_text='Filter used to found group. Ex: (objectClass=group)', verbose_name='Group search filter')),
                ('group_member_attr', models.TextField(default='member', help_text='Attribute which contains  list of group members', verbose_name='Members attribute')),
                ('enable_oauth2', models.BooleanField(help_text='Export oauth2 attributes')),
                ('oauth2_attributes', models.TextField(help_text='Oauth2 attribute(s)')),
                ('oauth2_type_return', models.TextField(choices=[('dict', 'Dictionnary of keys and values'), ('list', 'List of values')], default='dict', help_text='Type of returned scope values')),
                ('oauth2_token_return', models.TextField(choices=[('header', 'Header'), ('json', 'JSON'), ('both', 'Header and JSON')], default='header', help_text='Token response place (in header, or in response, or both)')),
                ('oauth2_token_ttl', models.PositiveIntegerField(default=3600, help_text='Oauth2 token time to live (in seconds)')),
            ],
            bases=('authentication.baserepository',),
        ),
        migrations.CreateModel(
            name='OTPRepository',
            fields=[
                ('baserepository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='authentication.BaseRepository')),
                ('otp_type', models.TextField(choices=[('phone', 'Phone'), ('email', 'Email'), ('onetouch', 'OneTouch'), ('totp', 'Time-based OTP')], default='phone', help_text='Type of OTP authentication', verbose_name='Authentication type')),
                ('otp_phone_service', models.TextField(choices=[('authy', 'Authy (sms and mobile app)')], default='authy', help_text='Phone service for OTP', verbose_name='Phone service')),
                ('api_key', models.TextField(default='', help_text='API KEY for Authy service', verbose_name='API Key')),
                ('otp_mail_service', models.TextField(choices=[('vlt_mail_service', 'Vulture mail service')], default='vlt_mail_service', help_text='Mail service for OTP', verbose_name='Mail service')),
                ('key_length', models.PositiveIntegerField(default=8, help_text='Key length for email authentication', validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(20)], verbose_name='Key length')),
            ],
            bases=('authentication.baserepository',),
        ),
        migrations.CreateModel(
            name='RadiusRepository',
            fields=[
                ('baserepository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='authentication.BaseRepository')),
                ('host', models.TextField(help_text='IP Address of RADIUS server', verbose_name='Host')),
                ('port', models.PositiveIntegerField(default=1812, help_text='Listening authentication port of RADIUS server', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Port')),
                ('nas_id', models.TextField(default='0', help_text='NAS_ID of the RADIUS server', verbose_name='NAS_ID')),
                ('secret', models.TextField(help_text='Secret used to authenticate clients', verbose_name='Authentication secret')),
                ('retry', models.PositiveIntegerField(default=3, help_text='Max number of retries to contact Radius server', verbose_name='Max retries to authenticate clients')),
                ('timeout', models.PositiveIntegerField(default=2, help_text='Max timeout to contact Radius server', verbose_name='Max timeout to authenticate clients')),
            ],
            bases=('authentication.baserepository',),
        ),
        migrations.AddField(
            model_name='userauthentication',
            name='repositories_fallback',
            field=djongo.models.fields.ArrayReferenceField(default=[], help_text='Repositories to use to authenticate users if main repository failed.', on_delete=django.db.models.deletion.SET_DEFAULT, related_name='user_authentication_fallback_set', to='authentication.BaseRepository', verbose_name='Authentication fallback repositories'),
        ),
        migrations.AddField(
            model_name='userauthentication',
            name='repository',
            field=models.ForeignKey(help_text='Repository to use to authenticate users', on_delete=django.db.models.deletion.PROTECT, related_name='user_authentication_set', to='authentication.BaseRepository', verbose_name='Authentication repository'),
        ),
        migrations.AddField(
            model_name='userauthentication',
            name='otp_repository',
            field=models.ForeignKey(help_text='Double authentication repository to use', null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.OTPRepository', verbose_name='OTP Repository'),
        ),
    ]
