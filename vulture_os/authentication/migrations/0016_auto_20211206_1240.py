# Generated by Django 3.0.5 on 2021-12-06 12:40

import bson.objectid
from django.db import migrations, models
import django.db.models.deletion
import djongo.models.fields

# Ensure PortalTemplate objects have unique names before enforcing unicity
def remove_duplicate_openid_repositories(apps, schema_editor):
    openid_repo_model = apps.get_model("authentication", "OpenIDRepository")
    user_authentication_model = apps.get_model("authentication", "UserAuthentication")
    db_alias = schema_editor.connection.alias
    repositories = openid_repo_model.objects.using(db_alias)
    portals = user_authentication_model.objects.using(db_alias)

    # Search for objects with equivalent client_id
    duplicate_client_ids = []
    for repository in repositories.all():
        if repositories.filter(client_id=repository.client_id).count() > 1:
            duplicate_client_ids.append(repository.client_id)

    # For each repo with duplicate client_id, cycle through them to remove duplicates
    for duplicate_client_id in duplicate_client_ids:
        print(f"deleting duplicate OpenID repositories with client_id {duplicate_client_id}")
        i = 0
        remaining_repo = None
        for repository in repositories.filter(client_id=duplicate_client_id):
            if i > 0:
                # replace every links to the duplicate repository with the one that will remain
                for portal in portals.filter(repositories=repository):
                    print(f"changing repositories of portal {portal} to use remaining/valid repository {remaining_repo}")
                    portal.repositories.remove(repository)
                    portal.repositories.add(remaining_repo)
                repository.delete()
            else:
                remaining_repo = repository
            i = i + 1

class Migration(migrations.Migration):

    dependencies = [
        ('authentication', '0015_auto_20211014_1208'),
    ]

    operations = [
        migrations.RunPython(remove_duplicate_openid_repositories, migrations.RunPython.noop),

        migrations.AlterField(
            model_name='openidrepository',
            name='client_id',
            field=models.TextField(help_text="Client ID is the OAuth 2.0 Client Identifier retrieved from your identity provider. See your identity provider's documentation.", verbose_name='Provider Client ID'),
        ),
        migrations.AlterField(
            model_name='openidrepository',
            name='client_secret',
            field=models.TextField(help_text="Client secret is the OAuth 2.0 Client secret associated with your client ID and retrieved from your identity provider. See your identity provider's documentation.", verbose_name='Provider Client Secret'),
        ),
        migrations.AddConstraint(
            model_name='openidrepository',
            constraint=models.UniqueConstraint(fields=('provider', 'client_id', 'client_secret'), name='unique_openid_tuple'),
        ),

        migrations.AlterField(
            model_name='userauthentication',
            name='sso_keep_client_cookies',
            field=models.BooleanField(default=True, help_text="Take client's cookies while executing SSO requests"),
        ),
    ]
