#!/home/vlt-os/env/bin/python
"""This file is part of Vulture OS.

Vulture OS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Vulture OS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Vulture OS.  If not, see http://www.gnu.org/licenses/.
"""
__author__ = "Kevin GUILLEMOT"
__credits__ = []
__license__ = "GPLv3"
__version__ = "4.0.0"
__maintainer__ = "Vulture OS"
__email__ = "contact@vultureproject.org"
__doc__ = 'OTPRepository dedicated form class'

# Django system imports
from django.conf import settings
from django.core.validators import RegexValidator
from django.forms import CheckboxInput, ModelForm, NumberInput, PasswordInput, Select, TextInput
# Django project imports
from authentication.otp.models import OTPRepository, OTP_TYPE, OTP_PHONE_SERVICE, OTP_MAIL_SERVICE

# Extern modules imports
from re import match as re_match

# Required exceptions imports
from django.forms import ValidationError

# Logger configuration imports
import logging
logging.config.dictConfig(settings.LOG_SETTINGS)
logger = logging.getLogger('gui')


class OTPRepositoryForm(ModelForm):

    class Meta:
        model = OTPRepository
        fields = ('name', 'api_key', 'key_length', 'otp_type', 'otp_phone_service', 'otp_mail_service', 'totp_label')
        widgets = {
            'name': TextInput(attrs={'class': 'form-control'}),
            'api_key': TextInput(attrs={'class': 'form-control', 'placeholder': "tApk5hmAQWNs5qNh7gVEy9OD9pbaEEji"}),
            'key_length': NumberInput(attrs={'class': 'form-control'}),
            'otp_type': Select(choices=OTP_TYPE, attrs={'class': 'form-control select2'}),
            'otp_phone_service': Select(choices=OTP_PHONE_SERVICE, attrs={'class': 'form-control select2'}),
            'otp_mail_service': Select(choices=OTP_MAIL_SERVICE, attrs={'class': 'form-control select2'}),
            'totp_label': TextInput(attrs={'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Remove the blank input generated by django
        for field_name in ['otp_type', 'otp_phone_service', 'otp_mail_service']:
            self.fields[field_name].empty_label = None
        # Set all fields as non required
        for field in ['api_key', 'key_length', 'otp_phone_service', 'otp_mail_service', 'totp_label']:
            self.fields[field].required = False
        if not self.initial.get('name'):
            self.fields['name'].initial = "OTP Repository"

    def clean_name(self):
        """ Replace all spaces by underscores to prevent bugs later """
        return self.cleaned_data['name'].replace(' ', '_')

    def clean_api_key(self):
        """ Check API by regex """
        value = self.cleaned_data.get('api_key')
        if value:
            RegexValidator("^[A-Za-z0-9]+$", value)
        return value

    def clean(self, *args, **kwargs):
        cleaned_data = super().clean()
        otp_type = cleaned_data.get('otp_type')

        if otp_type == "email":
            if not cleaned_data.get('otp_mail_service'):
                self.add_error('otp_mail_service', "This field is required with {} type.".format(otp_type))
            if not cleaned_data.get('key_length'):
                self.add_error('key_length', "This field is required with {} type.".format(otp_type))

        if otp_type in ["phone", "onetouch"]:
            if not cleaned_data.get('otp_phone_service'):
                self.add_error('otp_phone_service', "This field is required with {} type.".format(otp_type))
            if not cleaned_data.get('api_key'):
                self.add_error('api_key', "This field is required with {} type.".format(otp_type))

        if otp_type == "totp":
            if not cleaned_data.get('totp_label'):
                self.add_error('totp_label', "This field is required with {} type.".format(otp_type))

        return cleaned_data
