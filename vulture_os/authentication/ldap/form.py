#!/home/vlt-os/env/bin/python
"""This file is part of Vulture OS.

Vulture OS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Vulture OS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Vulture OS.  If not, see http://www.gnu.org/licenses/.
"""
__author__ = "Kevin GUILLEMOT"
__credits__ = []
__license__ = "GPLv3"
__version__ = "4.0.0"
__maintainer__ = "Vulture OS"
__email__ = "contact@vultureproject.org"
__doc__ = 'LDAPRepository dedicated form class'

# Django system imports
from django.conf import settings
from django.core.validators import RegexValidator
from django.forms import CheckboxInput, ModelForm, NumberInput, PasswordInput, Select, TextInput

# Django project imports
from authentication.ldap.models import (LDAPRepository, LDAP_ENC_SCHEMES_CHOICES, LDAP_PROTO_CHOICES,
                                        LDAP_SCOPES_CHOICES, OAUTH2_TYPE_CHOICES, OAUTH2_TOKEN_CHOICES)

# Extern modules imports
from re import match as re_match

# Required exceptions imports
from django.forms import ValidationError

# Logger configuration imports
import logging
logging.config.dictConfig(settings.LOG_SETTINGS)
logger = logging.getLogger('gui')


class LDAPRepositoryForm(ModelForm):

    class Meta:
        model = LDAPRepository
        fields = ('name', 'host', 'port', 'protocol', 'encryption_scheme', 'connection_dn', 'dn_password', 'base_dn',
                  'user_scope', 'user_dn', 'user_attr', 'user_filter', 'user_account_locked_attr', 'user_smartcardid_attr',
                  'user_change_password_attr', 'user_groups_attr', 'user_mobile_attr', 'user_email_attr',
                  'group_scope', 'group_dn', 'group_attr', 'group_filter', 'group_member_attr')
        widgets = {
            'name': TextInput(attrs={'class': 'form-control'}),
            'host': TextInput(attrs={'class': 'form-control'}),
            'port': NumberInput(attrs={'class': 'form-control'}),
            'protocol': Select(choices=LDAP_PROTO_CHOICES, attrs={'class': 'form-control select2'}),
            'encryption_scheme': Select(choices=LDAP_ENC_SCHEMES_CHOICES, attrs={'class': 'form-control select2'}),
            'connection_dn': TextInput(attrs={'class': 'form-control'}),
            'dn_password': PasswordInput(render_value=True, attrs={'class': 'form-control'}),
            'base_dn': TextInput(attrs={'class': 'form-control'}),
            'user_scope': Select(choices=LDAP_SCOPES_CHOICES, attrs={'class': 'form-control select2'}),
            'user_dn': TextInput(attrs={'class': 'form-control'}),
            'user_attr': TextInput(attrs={'class': 'form-control'}),
            'user_filter': TextInput(attrs={'class': 'form-control'}),
            'user_account_locked_attr': TextInput(attrs={'class': 'form-control'}),
            'user_change_password_attr': TextInput(attrs={'class': 'form-control'}),
            'user_groups_attr': TextInput(attrs={'class': 'form-control'}),
            'user_mobile_attr': TextInput(attrs={'class': 'form-control'}),
            'user_email_attr': TextInput(attrs={'class': 'form-control'}),
            'user_smartcardid_attr': TextInput(attrs={'class': 'form-control'}),
            'group_scope': Select(choices=LDAP_SCOPES_CHOICES, attrs={'class': 'form-control select2'}),
            'group_dn': TextInput(attrs={'class': 'form-control'}),
            'group_attr': TextInput(attrs={'class': 'form-control'}),
            'group_filter': TextInput(attrs={'class': 'form-control'}),
            'group_member_attr': TextInput(attrs={'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Remove the blank input generated by django
        for field_name in ['protocol', 'encryption_scheme', 'user_scope', 'group_scope']:
            self.fields[field_name].empty_label = None
        # Set all fields as non required
        for field in self.fields:
            self.fields[field].required = False
        if not self.initial.get('name'):
            self.fields['name'].initial = "LDAP Repository"

    def connection_is_valid(self):
        """ Method used to verify connection test needed fields only """
        form_fields = (
            "host",
            "dn_password",
            "port",
            "connection_dn",
            "protocol",
            "encryption_scheme"
        )
        for fieldname in form_fields:
            self.fields[fieldname].required = True
        return self.is_valid()

    def user_search_is_valid(self):
        """ Method used to verify user authentication test needed fields only """
        form_fields = (
            "base_dn",
            "user_scope",
            "user_attr",
            "user_filter",
            # email, phone etc are not really mandatory
        )
        """ First test if connection needed fields are OK """
        if not self.connection_is_valid():
            return False
        for fieldname in form_fields:
            self.fields[fieldname].required = True
        return self.is_valid()

    def group_search_is_valid(self):
        """ Method used to verify user authentication test needed fields only """
        form_fields = (
            "base_dn",
            "group_scope",
            "group_attr",
            "group_filter"
            # members attribute is not really mandatory
        )
        """ First test if connection needed fields are OK """
        if not self.connection_is_valid():
            return False
        for fieldname in form_fields:
            self.fields[fieldname].required = True
        return self.is_valid()

    def clean_name(self):
        """ Replace all spaces by underscores to prevent bugs later """
        return self.cleaned_data['name'].replace(' ', '_')

    def clean_host(self):
        value = self.cleaned_data.get('host')
        RegexValidator('^[A-Za-z0-9-.]*$', value)
        return value

    def clean_ldap_filter(self, field_name):
        """ Function used to validate LDAP filter
        validation condition: need to have leading and trailing parentheses
        :param field_name: Name of field to clean
        :return: Cleaned data
        """
        value = self.cleaned_data.get(field_name)
        if value and not re_match("^\(.*\)$", value):
            raise ValidationError("This field requires leading and trailing parentheses.")
        return value

    def clean_user_filter(self):
        return self.clean_ldap_filter('user_filter')

    def clean_user_account_locked_attr(self):
        return self.clean_ldap_filter('user_account_locked_attr')

    def clean_user_change_password_attr(self):
        return self.clean_ldap_filter('user_change_password_attr')

    def clean_group_filter(self):
        return self.clean_ldap_filter('group_filter')
