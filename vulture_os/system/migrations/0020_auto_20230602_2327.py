# Generated by Django 3.2.19 on 2023-06-02 23:27

from django.db import migrations, models
import re

PATTERN_IFACE_NAME = re.compile("([a-z]+)([0-9]+)")

net_addrs_backup = dict()

def save_existing_addresses(apps, schema_editor):
    networkAddressModel = apps.get_model("system", "NetworkAddress")
    db_alias = schema_editor.connection.alias
    networkAddressObjects = networkAddressModel.objects.using(db_alias)

    for net_addr in networkAddressObjects.all():
        net_addrs_backup.update({
            net_addr.id: {
                "vlandev": net_addr.vlandev.id if net_addr.vlandev else 0,
                "is_system": net_addr.is_system,
            }
        })

def update_existing_addresses(apps, schema_editor):
    networkAddressModel = apps.get_model("system", "NetworkAddress")
    NICModel = apps.get_model("system", "NetworkInterfaceCard")
    networkAddressNICModel = apps.get_model("system", "NetworkAddressNIC")
    db_alias = schema_editor.connection.alias
    networkAddressObjects = networkAddressModel.objects.using(db_alias)
    NICObjects = NICModel.objects.using(db_alias)
    networkAddressNICObjects = networkAddressNICModel.objects.using(db_alias)

    for new_net_addr in networkAddressObjects.all():
        saved_net_addr = net_addrs_backup[new_net_addr.id]

        if new_net_addr.vlan:
            new_net_addr.type = 'vlan'
        elif saved_net_addr.get('is_system'):
            new_net_addr.type = "system"
        else:
            new_net_addr.type = 'alias'

        if not new_net_addr.type == "system":
            addr_nic = networkAddressNICObjects.get(network_address=new_net_addr.id)
            nic = addr_nic.nic
            iface_name_match = re.search(PATTERN_IFACE_NAME, nic.dev)
            if not iface_name_match:
                print(f"Could not get NIC name and ID: {nic.dev}")
                continue
            nic_id = iface_name_match.group(2)

            if new_net_addr.type == "vlan":
                vlandev = NICObjects.get(id=saved_net_addr['vlandev'])
                addr_nic.nic = vlandev

            new_net_addr.iface_id = nic_id
            addr_nic.save()

        new_net_addr.save()



class Migration(migrations.Migration):

    dependencies = [
        ('system', '0019_auto_20230227_1322'),
    ]

    operations = [
        migrations.RunPython(save_existing_addresses, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name='networkaddress',
            name='is_system',
        ),
        migrations.RemoveField(
            model_name='networkaddress',
            name='vlandev',
        ),
        migrations.AddField(
            model_name='networkaddress',
            name='iface_id',
            field=models.SmallIntegerField(default=-1, null=True, verbose_name='virtual Interface number (for ALIAS/VLAN/LAGG)'),
        ),
        migrations.AddField(
            model_name='networkaddress',
            name='lagg_proto',
            field=models.TextField(blank=True, choices=[('failover', 'Failover'), ('lacp', 'LACP'), ('loadbalance', 'Load Balance'), ('roundrobin', 'RoundRobin'), ('broadcast', 'Broadcast'), ('none', 'Disabled')], verbose_name='Link aggregation protocol type'),
        ),
        migrations.AddField(
            model_name='networkaddress',
            name='type',
            field=models.TextField(choices=[('system', 'System'), ('alias', 'Alias'), ('vlan', 'Vlan'), ('lagg', 'Link Aggregation')], default='system', verbose_name='Interface type'),
        ),
        migrations.AlterField(
            model_name='networkaddress',
            name='ip',
            field=models.GenericIPAddressField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='networkaddress',
            name='prefix_or_netmask',
            field=models.TextField(blank=True),
        ),
        migrations.RunPython(update_existing_addresses, migrations.RunPython.noop),
    ]
