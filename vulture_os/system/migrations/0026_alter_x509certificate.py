# Generated by Django 4.2.18 on 2025-02-06 06:43

import cryptography.x509
import cryptography.x509.base
import cryptography.x509.oid
import django.utils.timezone
from django.db import migrations, models

certs_backup = dict()

def save_cert_serial_values(apps, schema_editor):
    x509certificateModel = apps.get_model("system", "x509certificate")
    db_alias = schema_editor.connection.alias
    x509certificates = x509certificateModel.objects.using(db_alias)

    for cert in x509certificates.all():
        certs_backup[cert.name] = cert.serial


def fill_valid_datetimes_and_cn(apps, schema_editor):
    x509certificateModel = apps.get_model("system", "x509certificate")
    db_alias = schema_editor.connection.alias
    x509certificates = x509certificateModel.objects.using(db_alias)

    for cert in x509certificates.all():
        try:
            x509_cert = cryptography.x509.load_pem_x509_certificate(cert.cert.encode())
        except Exception as e:
            print(f"Error while loading existing cert: {e}")
            continue
        cert.valid_from = x509_cert.not_valid_before_utc
        cert.valid_until = x509_cert.not_valid_after_utc
        try:
            cert.cn = x509_cert.subject.get_attributes_for_oid(cryptography.x509.oid.NameOID.COMMON_NAME)[0].value
        except Exception as e:
            print(f"Could not get the CN of the certificate: {e}")

        cert.save()


def restore_cert_serial_values(apps, schema_editor):
    x509certificateModel = apps.get_model("system", "x509certificate")
    db_alias = schema_editor.connection.alias
    x509certificates = x509certificateModel.objects.using(db_alias)

    for cert in x509certificates.all():
        cert.serial = str(certs_backup.get(cert.name, 0))
        cert.save()


class Migration(migrations.Migration):

    dependencies = [
        ('system', '0025_tenants_custom_config'),
    ]

    operations = [
        migrations.RunPython(save_cert_serial_values, restore_cert_serial_values),
        migrations.RemoveField(
            model_name='x509certificate',
            name='serial',
        ),
        migrations.AddField(
            model_name='x509certificate',
            name='serial',
            field=models.TextField(default=cryptography.x509.base.random_serial_number),
        ),
        migrations.RunPython(restore_cert_serial_values, save_cert_serial_values),
        migrations.AddField(
            model_name='x509certificate',
            name='cn',
            field=models.TextField(default=''),
        ),
        migrations.AddField(
            model_name='x509certificate',
            name='valid_from',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='Certificate is valid from'),
        ),
        migrations.AddField(
            model_name='x509certificate',
            name='valid_until',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='Certificate is valid until'),
        ),
        migrations.RunPython(fill_valid_datetimes_and_cn, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='x509certificate',
            name='status',
            field=models.TextField(blank=True, choices=[('V', 'valid'), ('R', 'revoked')], default='V'),
        ),
    ]
