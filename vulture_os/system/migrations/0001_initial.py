# Generated by Django 2.1.3 on 2019-04-01 07:58

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('authentication', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pf_ssh_restrict', models.TextField(default='any')),
                ('pf_admin_restrict', models.TextField(default='any')),
                ('cluster_api_key', models.TextField(default='changeme')),
                ('oauth2_header_name', models.TextField(default='X-Vlt-Token')),
                ('portal_cookie_name', models.TextField(default='changeme')),
                ('public_token', models.TextField(default='changeme')),
                ('customer_name', models.TextField(default='ACME Corporation')),
                ('branch', models.TextField(default='community')),
                ('predator_apikey', models.TextField(blank=True, default='fdsqJr_45;..')),
                ('shodan_apikey', models.TextField(blank=True, default='')),
                ('smtp_server', models.TextField(blank=True, default='')),
                ('pf_whitelist', models.TextField(blank=True, default='', null=True)),
                ('pf_blacklist', models.TextField(blank=True, default='', null=True)),
                ('ssh_authorized_key', models.TextField(blank=True, default='', null=True)),
                ('rsa_encryption_key', models.TextField(blank=True, default='', null=True)),
                ('ldap_repository', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.LDAPRepository')),
            ],
        ),
        migrations.CreateModel(
            name='ErrorTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='Default template', help_text='Name of the ErrorTemplate to use in Listener/Application', unique=True)),
                ('error_400_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_400_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_400_html', models.TextField(default='<html><body><h1>400 Bad request</h1>\n<p>Your browser sent an invalid request.</p>\n</body></html>', help_text='HTML code to render if 400 (Bad Request) code is returned.')),
                ('error_403_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_403_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_403_html', models.TextField(default="<html><body><h1>403 Forbidden</h1>\n<p>You don't have permission to access this url on this server.<br/></p>\n</body></html>", help_text='HTML code to render if 403 (Forbidden) code is returned.')),
                ('error_405_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_405_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_405_html', models.TextField(default='<html><body><h1>405 Method Not Allowed</h1>\n<p>The requested method is not allowed for that URL.</p>\n</body></html>', help_text='HTML code to render if 405 (Method Not Allowed) code is returned.')),
                ('error_408_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_408_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_408_html', models.TextField(default='<html><body><h1>408 Request Timeout</h1>\n<p>Server timeout waiting for the HTTP request from the client.</p>\n</body></html>', help_text='HTML code to render if 408 (Request Timeout) code is returned.')),
                ('error_425_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_425_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_425_html', models.TextField(default='<html><body><h1>425 Too Early</h1>\n<p>.</p>\n</body></html>', help_text='HTML code to render if 425 (Too Early) code is returned.')),
                ('error_429_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_429_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_429_html', models.TextField(default='<html><body><h1>429 Too Many Requests</h1>\n<p>The user has sent too many requests in a given amount of time.</p>\n</body></html>', help_text='HTML code to render if 429 (Too Many Requests) code is returned.')),
                ('error_500_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_500_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_500_html', models.TextField(default='<html><body><h1>500 Internal Server Error</h1>\n<p>The server encountered an internal error or\nmisconfiguration and was unable to complete\nyour request.</p>\n<p>Please contact the server administrator\nto inform them of the time this error occurred,\nand the actions you performed just before this error.</p>\n<p>More information about this error may be available\nin the server error log.</p>\n</body></html>', help_text='HTML code to render if 500 (Internal Server Error) code is returned.')),
                ('error_502_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_502_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_502_html', models.TextField(default='<html><body><h1>502 Bad Gateway</h1>\n<p>The proxy server received an invalid response from an upstream server.<br/></p>\n</body></html>', help_text='HTML code to render if 502 (Bad Gateway) code is returned.')),
                ('error_503_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_503_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_503_html', models.TextField(default='<html><body><h1>503 Service Unavailable</h1>\n<p>The server is temporarily unable to service your\nrequest due to maintenance downtime or capacity\nproblems. Please try again later.</p>\n</body></html>', help_text='HTML code to render if 503 (Service Unavailable) code is returned.')),
                ('error_504_mode', models.TextField(choices=[('display', 'Render HTML'), ('302', 'Redirect with 302'), ('303', 'Redirect with 303')], default='display', help_text='Display the error or redirect with 302/303 code.')),
                ('error_504_url', models.TextField(default='http://www.example.com/test/ or /test/', help_text='Absolute or relative url to redirect to when the error code is encountered.')),
                ('error_504_html', models.TextField(default='<html><body><h1>504 Gateway Timeout</h1>\n<p>The gateway did not receive a timely response\nfrom the upstream server or application.</p>\n</body></html>', help_text='HTML code to render if 504 (Gateway Timeout) code is returned.')),
            ],
        ),
        migrations.CreateModel(
            name='MessageQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_add', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.TextField(default='new')),
                ('result', models.TextField(default='')),
                ('action', models.TextField()),
                ('config', models.TextField(blank=True)),
                ('modified', models.DateTimeField()),
                ('internal', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='NetworkAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='Friendly name')),
                ('ip', models.GenericIPAddressField()),
                ('prefix_or_netmask', models.TextField()),
                ('is_system', models.BooleanField(default=False)),
                ('carp_vhid', models.SmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='NetworkAddressNIC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('carp_priority', models.SmallIntegerField(default=0)),
                ('carp_passwd', models.TextField(default='-')),
                ('network_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.NetworkAddress')),
            ],
        ),
        migrations.CreateModel(
            name='NetworkInterfaceCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dev', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('pf_limit_states', models.IntegerField(default=100000)),
                ('pf_limit_frags', models.IntegerField(default=25000)),
                ('pf_limit_src', models.IntegerField(default=50000)),
                ('pf_custom_config', models.TextField(blank=True, default='')),
                ('gateway', models.TextField(blank=True)),
                ('gateway_ipv6', models.TextField(blank=True)),
                ('static_routes', models.TextField(blank=True, default='#static_routes="net1 net2"\n#route_net1="-net 192.168.0.0/24 192.168.0.1"\n#route_net2="-net 192.168.1.0/24 192.168.1.1"\n')),
                ('management_ip', models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TLSProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='TLS Profile', help_text='Name of the TLS profile', unique=True)),
                ('compatibility', models.TextField(choices=[('modern', 'Modern'), ('intermediate', 'Intermediate'), ('old', 'Old'), ('custom', 'Custom')], default='modern', help_text='Compatibility of web browsers.')),
                ('protocols', djongo.models.fields.JSONField(default=['tlsv12'], help_text='Allowed protocol ciphers.', verbose_name=models.TextField(choices=[('tlsv12', 'TLSv1.2'), ('tlsv11', 'TLSv1.1'), ('tlsv10', 'TLSv1.0'), ('sslv3', 'SSLv3')]))),
                ('cipher_suite', models.TextField(default='ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256', help_text='Allowed protocol ciphers.')),
                ('alpn', djongo.models.fields.JSONField(default=['h2', 'http/1.1'], help_text='Advertise the TLS ALPN extensions list.', verbose_name=models.TextField(choices=[('h2', 'HTTP2'), ('http/1.1', 'HTTP1.1'), ('http/1.0', 'HTTP1.0')]))),
                ('verify_client', models.TextField(choices=[('none', 'No'), ('optional', 'Optional'), ('required', 'Required')], default='none', help_text="If set to 'none', client certificate is not requested. This is the default. In other cases, a client certificate is requested.")),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('is_ldapuser', models.BooleanField(default=False)),
            ],
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='X509Certificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('serial', models.SmallIntegerField(default=1)),
                ('status', models.TextField(blank=True, default='V')),
                ('cert', models.TextField(blank=True)),
                ('key', models.TextField(blank=True)),
                ('chain', models.TextField(blank=True)),
                ('csr', models.TextField(blank=True)),
                ('crl', models.TextField(blank=True)),
                ('is_ca', models.BooleanField(default=False)),
                ('is_vulture_ca', models.BooleanField(default=False)),
                ('is_external', models.BooleanField(default=False)),
                ('crl_uri', models.TextField(blank=True, default='')),
                ('rev_date', models.TextField(blank=True)),
            ],
        ),
        migrations.AddField(
            model_name='tlsprofile',
            name='ca_cert',
            field=models.ForeignKey(help_text="CA certificate used to verify client's certificate if verify != none.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ca_cert_of', to='system.X509Certificate'),
        ),
        migrations.AddField(
            model_name='tlsprofile',
            name='x509_certificate',
            field=models.ForeignKey(help_text='X509Certificate object to use.', on_delete=django.db.models.deletion.CASCADE, related_name='certificate_of', to='system.X509Certificate'),
        ),
        migrations.AddField(
            model_name='networkinterfacecard',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.Node'),
        ),
        migrations.AddField(
            model_name='networkaddressnic',
            name='nic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.NetworkInterfaceCard'),
        ),
        migrations.AddField(
            model_name='networkaddress',
            name='nic',
            field=models.ManyToManyField(through='system.NetworkAddressNIC', to='system.NetworkInterfaceCard'),
        ),
        migrations.AddField(
            model_name='messagequeue',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.Node'),
        ),
    ]
