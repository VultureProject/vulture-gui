# Generated by Django 2.1.3 on 2019-04-01 07:58

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('system', '0001_initial'),
        ('applications', '0003_auto_20190401_0758'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApacheSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='BlacklistWhitelist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('rule', djongo.models.fields.JSONField(default={})),
                ('type_rule', models.TextField(default='blacklist')),
            ],
        ),
        migrations.CreateModel(
            name='DarwinSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Frontend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, help_text='Enable the frontend')),
                ('name', models.TextField(default='Listener', help_text='Name of HAProxy frontend', unique=True)),
                ('tags', djongo.models.fields.JSONField(default=[], help_text='Tags to set on this object for search', verbose_name=models.SlugField(default=''))),
                ('mode', models.TextField(choices=[('tcp', 'TCP'), ('http', 'HTTP'), ('log', 'LOG'), ('impcap', 'IMPCAP')], default='tcp', help_text='Listening mode')),
                ('timeout_connect', models.PositiveIntegerField(default=2000, help_text='HTTP request Timeout', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20000)], verbose_name='Timeout')),
                ('timeout_client', models.PositiveIntegerField(default=2000, help_text='HTTP request Timeout', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50000)], verbose_name='Timeout')),
                ('timeout_keep_alive', models.PositiveIntegerField(default=500, help_text='HTTP Keep-Alive timeout', validators=[django.core.validators.MinValueValidator(1)], verbose_name='HTTP Keep-Alive timeout')),
                ('impcap_filter_type', models.TextField(choices=[('udp and port 53', 'DNS'), ('tcp[13] & 2 != 0', 'SYN FLAGS'), ('custom', 'Custom')], default='udp and port 53', help_text='Simple filters used by impcap', verbose_name='Impcap filter type')),
                ('impcap_filter', models.TextField(default='', help_text='Filter used by impcap for trafic listening (tcpdump format)', verbose_name='Impcap filter')),
                ('enable_impcap_darwin_dns', models.BooleanField(default=False, help_text='Enable Darwin prediction on DNS queries captured by Impcap', verbose_name='Enable Darwin DGA filter on Impcap DNS queries')),
                ('enable_logging', models.BooleanField(default=False, help_text='Enable requests logging')),
                ('enable_logging_reputation', models.BooleanField(default=False, help_text='Add reputation tags in rsyslog message')),
                ('enable_logging_geoip', models.BooleanField(default=False, help_text='Add Geoip location in rsyslog message')),
                ('log_level', models.TextField(choices=[('info', 'Info'), ('debug', 'Debug')], default='warning', help_text='Log level')),
                ('log_condition', models.TextField(default='', help_text='Conditional configuration of log forwarders')),
                ('stock_logs_locally', models.BooleanField(default=False, help_text='Keep logs on system.')),
                ('configuration', djongo.models.fields.JSONField(default={})),
                ('ruleset', models.TextField(default='haproxy', help_text='RuleSet type to use by rsyslog to send output stream')),
                ('status', djongo.models.fields.JSONField(default={})),
                ('listening_mode', models.TextField(choices=[('udp', 'UDP'), ('tcp', 'TCP'), ('tcp,udp', 'TCP & UDP'), ('relp', 'RELP (TCP)')], default='tcp', help_text='TCP mode = HAProxy, UDP mode = Rsyslog')),
                ('custom_haproxy_conf', models.TextField(default='', help_text='Custom HAProxy configuration directives.')),
                ('enable_cache', models.BooleanField(default=False, help_text='Enable cache')),
                ('cache_total_max_size', models.PositiveIntegerField(default=4, help_text='Size of the cache in RAM, in Mb.')),
                ('cache_max_age', models.PositiveIntegerField(default=60, help_text='Size of the cache in RAM, in Mb.')),
                ('enable_compression', models.BooleanField(default=False, help_text='Enable compression')),
                ('compression_algos', models.TextField(default='gzip', help_text='List of supported compression algorithms.')),
                ('compression_mime_types', models.TextField(default='text/html,text/plain', help_text='List of MIME types that will be compressed.')),
            ],
        ),
        migrations.CreateModel(
            name='FrontendReputationContext',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, help_text='Enable this ReputationContext in Frontend', verbose_name='Enable')),
                ('arg_field', models.TextField(default='', help_text='Field name to predict with MMDB Database', verbose_name='Input field name')),
                ('frontend', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='services.Frontend')),
                ('reputation_ctx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='applications.ReputationContext', verbose_name='Custom tags')),
            ],
        ),
        migrations.CreateModel(
            name='HAProxySettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Listener',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port', models.PositiveIntegerField(default=80, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('whitelist_ips', models.TextField(default='any', help_text='IPs to allow traffic from')),
                ('max_src', models.PositiveIntegerField(default=100, help_text='Max number of connexions per source.', validators=[django.core.validators.MinValueValidator(1)])),
                ('max_rate', models.PositiveIntegerField(default=150, help_text='Max number of new connexions per source per second.', validators=[django.core.validators.MinValueValidator(1)])),
                ('rsyslog_port', models.PositiveIntegerField(default=10000)),
                ('frontend', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.Frontend')),
                ('network_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.NetworkAddress')),
                ('tls_profiles', djongo.models.fields.ArrayReferenceField(default=[], on_delete=django.db.models.deletion.SET_DEFAULT, to='system.TLSProfile')),
            ],
        ),
        migrations.CreateModel(
            name='NetdataSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history', models.IntegerField(choices=[(3600, 3600), (7200, 7200), (14400, 14400), (28800, 28800), (43200, 43200), (86400, 86400)], default=3600)),
            ],
        ),
        migrations.CreateModel(
            name='PFSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='RsyslogDarwinSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stock_logs_locally', models.BooleanField(default=True, help_text='Stock logs as raw locally.')),
                ('log_forwarders', djongo.models.fields.ArrayReferenceField(help_text='Send access logs to log forwarders', null=True, on_delete=djongo.models.fields.ArrayReferenceField._on_delete, to='applications.LogOM', verbose_name='Send logs to')),
            ],
        ),
        migrations.CreateModel(
            name='RsyslogSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Strongswan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=False)),
                ('ipsec_type', models.TextField(choices=[('tunnel', 'Tunnel')], default='tunnel')),
                ('ipsec_keyexchange', models.TextField(choices=[('ikev2', 'IKE version 2')], default='ikev2')),
                ('ipsec_authby', models.TextField(choices=[('secret', 'PSK Authentication')], default='secret')),
                ('ipsec_psk', models.TextField(default='V3ryStr0ngP@ssphr@se')),
                ('ipsec_fragmentation', models.BooleanField(default=True)),
                ('ipsec_forceencaps', models.BooleanField(default=False)),
                ('ipsec_ike', models.TextField(default='aes256-sha512-modp8192')),
                ('ipsec_esp', models.TextField(default='aes256-sha512-modp8192')),
                ('ipsec_dpdaction', models.TextField(choices=[('none', 'None'), ('clear', 'Clear'), ('hold', 'Hold'), ('restart', 'Restart')], default='restart')),
                ('ipsec_dpddelay', models.TextField(default='35s')),
                ('ipsec_rekey', models.BooleanField(default=True)),
                ('ipsec_ikelifetime', models.TextField(default='3h')),
                ('ipsec_keylife', models.TextField(default='1h')),
                ('ipsec_right', models.TextField(default='')),
                ('ipsec_leftsubnet', models.TextField(default='')),
                ('ipsec_leftid', models.TextField(default='')),
                ('ipsec_rightsubnet', models.TextField(default='')),
                ('status', models.TextField(default='WAITING')),
                ('statusall', models.TextField(default='')),
                ('tunnels_status', djongo.models.fields.JSONField(default={})),
                ('tunnels_up', models.PositiveIntegerField(default=0)),
                ('tunnels_connecting', models.PositiveIntegerField(default=0)),
                ('node', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='system.Node')),
            ],
        ),
        migrations.CreateModel(
            name='VulturedSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
    ]
