# Generated by Django 4.2.21 on 2025-06-03 08:46

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('services', '0084_frontend_cisco_meraki_get_configuration_changes_logs_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='frontend',
            name='checkpoint_interval',
            field=models.PositiveIntegerField(blank=True, help_text='To improve reliability, write/update bookkeeping information every Nth record handled', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Update bookkeeping information every Nth entry'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='dequeue_batch_size',
            field=models.PositiveIntegerField(blank=True, help_text='Maximum number of messages to use in a dequeuing batch (default to 128 for LogForwarders, 1024 for Frontends)', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Size of the batch to dequeue'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='enable_disk_assist',
            field=models.BooleanField(default=False, help_text='Save logs on disk if queue reaches high usage', verbose_name='Enable disk queue on high queue usage'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='full_delay_mark',
            field=models.PositiveIntegerField(blank=True, help_text='Stop processing input logs when the queue reaches this percentage', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)], verbose_name='Stop processing input logs when queue reaches this size (between 1 and 99%)'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='high_watermark',
            field=models.PositiveIntegerField(blank=True, help_text='Write logs on disk if size of queue reaches this threshold', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)], verbose_name='High watermark for disk queuing (between 1 and 99%)'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='light_delay_mark',
            field=models.PositiveIntegerField(blank=True, help_text='Start throttling sender (if possible) when the queue reaches this percentage', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)], verbose_name='Throttle input when queue reaches this size (between 1 and 99%)'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='low_watermark',
            field=models.PositiveIntegerField(blank=True, help_text='Stop using disk when queue size falls below this threshold', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)], verbose_name='Low watermark for disk queuing (between 1 and 99%)'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='max_disk_space',
            field=models.PositiveIntegerField(blank=True, help_text='Limit the maximum disk space used by the queue in MB', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Max total disk space used by the queue (in MB)'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='max_file_size',
            field=models.PositiveIntegerField(blank=True, help_text='Set the max value of a queue file in MB (default to 1MB for actions and 16MB for rulesets)', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Max size of a queue file (in MB)'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='new_worker_minimum_messages',
            field=models.PositiveIntegerField(blank=True, help_text='Number of messages still in queue to start a new worker thread', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Minimum messages to start a new worker'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='queue_size',
            field=models.PositiveIntegerField(blank=True, help_text='Size of the queue in nb of message (default to 1000 for LogForwarders, 50000 for Frontends)', null=True, validators=[django.core.validators.MinValueValidator(100)], verbose_name='Size of the queue in nb of message'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='queue_type',
            field=models.TextField(choices=[('direct', 'Direct (no queuing)'), ('linkedlist', 'LinkedList (queue with fixed size but dynamic allocation)'), ('fixedarray', 'FixedArray (queue with fixed and preallocated size)')], default='linkedlist', help_text="Set a queue type for the rsyslog's Frontend/LogForwarder configuration", verbose_name='Rsyslog queue type'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='save_on_shutdown',
            field=models.BooleanField(default=True, help_text='Prevent message loss by writing on disk during a shutdown', verbose_name='Save remaining queue logs on shutdown'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='shutdown_timeout',
            field=models.PositiveIntegerField(blank=True, help_text='Time to wait for the queue to finish processing entries (in ms) before shutting down', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Queue timeout shutdown (ms)'),
        ),
        migrations.AddField(
            model_name='frontend',
            name='spool_directory',
            field=models.TextField(blank=True, default='/var/tmp', help_text='Set a writable folder to store DA queue', verbose_name='Disk-Assisted queue folder'),
        ),
        migrations.AlterField(
            model_name='frontend',
            name='nb_workers',
            field=models.PositiveIntegerField(default=8, help_text="Maximum number of workers for the rsyslog's LogForwarder/Frontend configuration", validators=[django.core.validators.MinValueValidator(1)], verbose_name='Maximum parser workers'),
        ),
    ]
