#This file is part of Vulture OS.
#

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################


{% for f_reputation_ctx in frontend.reputation_ctxs -%}
{% if f_reputation_ctx.enabled and f_reputation_ctx.reputation_ctx.db_type == "lookup" -%}
lookup_table(name="{{f_reputation_ctx.reputation_ctx.filename}}" file="{{f_reputation_ctx.reputation_ctx.absolute_filename}}")
{% endif -%}
{% endfor %}


{{ frontend.pre_ruleset }}

ruleset(name="{{ frontend.ruleset_name }}" queue.workerThreads="{{ frontend.nb_workers }}") {

    set $!frontend_name = "{{frontend.name}}";
    set $!tenants_name = "{{frontend.tenants_config.name}}";
    set $!filler = ""; # Used to complete resulting json in template

    action(type="mmjsonparse" cookie="" container="$.parsed")

    if $parsesuccess=="OK" then {

        # if length of variable is more than 3 ("{}\0"), then add a comma to $!filler to complete template output
        if strlen($.parsed) > 3 then {
            reset $!filler = ",";
        }

        {% for f_reputation_ctx in frontend.reputation_ctxs %}
        {% if f_reputation_ctx.enabled %}
        {% if f_reputation_ctx.reputation_ctx.db_type == "lookup" %}
        set $.parsed!{{f_reputation_ctx.dst_field}} = lookup("{{f_reputation_ctx.reputation_ctx.filename}}", $.parsed!{{f_reputation_ctx.arg_field}});
        {% else %}
        action( type="mmdblookup"
                mmdbfile="{{f_reputation_ctx.reputation_ctx.absolute_filename}}"
                fields=["!{{f_reputation_ctx.dst_field}}"]
                key="$.parsed!{{f_reputation_ctx.arg_field}}"
                cache_size="{{frontend.mmdb_cache_size}}")
        # We have to copy the value from iplocation tree to .parsed tree
        set $.parsed!{{f_reputation_ctx.dst_field}} = $!iplocation!{{f_reputation_ctx.dst_field}};
        {% endif %}
        {% endif %}
        {% endfor %}

        {% if frontend.reputation_database_v4 %}
        action( type="mmdblookup"
                mmdbfile="{{frontend.reputation_database_v4}}"
                fields=["!reputation"]
                key="$.parsed!net_src_ip4"
                cache_size="{{frontend.mmdb_cache_size}}")
        {% endif %}
        {% if frontend.reputation_database_v6 %}
        action( type="mmdblookup"
                mmdbfile="{{frontend.reputation_database_v6}}"
                fields=["!reputation"]
                key="$.parsed!net_src_ip6"
                cache_size="{{frontend.mmdb_cache_size}}")
        {% endif %}
        {% if frontend.geoip_database %}
        action( type="mmdblookup"
                mmdbfile="{{frontend.geoip_database}}"
                fields=["!geoip"]
                key="$.parsed!net_src_ip4"
                cache_size="{{frontend.mmdb_cache_size}}")
        action( type="mmdblookup"
                mmdbfile="{{frontend.geoip_database}}"
                fields=["!geoip"]
                key="$.parsed!net_src_ip6"
                cache_size="{{frontend.mmdb_cache_size}}")
        {% endif %}

        # Fields rename
        {% for field_value, origin_field in frontend.keep_source_fields.items() %}
        set $.parsed!{{field_value}} = $.parsed!{{origin_field.field_name}};
        {% if not origin_field.keep_source %}unset $.parsed!{{origin_field.field_name}};{% endif -%}
        {% endfor %}

        {% include "rsyslog_darwin/ruleset.conf" %}

        set $!frontend_name = "{{frontend.name}}";

        {{ frontend.log_condition }}

        action(type="omfile" DynaFile="recoveryfile" CreateDirs="on" action.ExecOnlyWhenPreviousIsSuspended="on" template="raw_message")
        stop
    } else {
        {{ frontend.log_condition_failure }}
        #We need at least a directive here - to prevent rsyslog error
        stop
    }
}
