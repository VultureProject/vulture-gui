#This file is part of Vulture OS.
#

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################

{% set darwin_default_calls = {
        "unad": [{
            "inputs": ["!impcap!net_src_ip", "!impcap!net_dst_ip", "!impcap!net_dst_port", "!impcap!IP_proto"],
            "outputs": []
        }],
        "content_inspection": [{
            "inputs": ["!impcap", "!data!content"],
            "outputs": ["!impcap!data"]
        }],
        "yara": [{
            "inputs": ["!data!content", "hex"],
            "outputs": ["!impcap!data"]
        }],
        "lkup": [{
            "inputs": ["!impcap!net_src_ip"],
            "outputs": ["!impcap!net_src_ip"]
        },{
            "inputs": ["!impcap!net_dst_ip"],
            "outputs": ["!impcap!net_dst_ip"]
        }],
        "conn": [{
            "inputs": ["!impcap!net_src_ip", "!impcap!net_dst_ip", "!impcap!net_dst_port", "!impcap!IP_proto"],
            "outputs": ["!impcap!net_src_ip", "!impcap!net_dst_ip"]
        }],
        "vast": [{
            "inputs": ["!impcap!net_bytes_total"],
            "outputs": ["!impcap!net_bytes_total"]
        }],
        "vaml": [{
            "inputs": ["!impcap!net_bytes_total"],
            "outputs": ["!impcap!net_bytes_total"]
        }]
}-%}

ruleset(name="{{ frontend.ruleset_name }}"
		queue.workerThreads="8"
		queue.type="linkedList"
		queue.size="1000000"
		queue.dequeueBatchSize="128"
		queue.workerThreadMinimumMessages="2048") {

    set $!frontend_name = "{{frontend.name}}";
    set $!tenants_name = "{{frontend.tenants_config.name}}";

    # Data parsing is not needed, messages are already JSONified

    # This is necessary to ensure presence of dictionary in message
    set $.ret = parse_json("{}", "\$!advens");

    # Reputation contexts
    set $!tags = "{";
    {% if frontend.reputation_ctxs %}
    {% for f_reputation_ctx in frontend.reputation_ctxs -%}
    {% if f_reputation_ctx.enabled -%}
    action( type="mmdblookup"
            mmdbfile="{{f_reputation_ctx.reputation_ctx.absolute_filename}}"
            fields=[":reputation_ctx_tag:!city!names!en"]
            key="{{f_reputation_ctx.arg_field}}")
    set $!tags = $!tags & "\"{{f_reputation_ctx.arg_field}}\":\"" & $!iplocation!reputation_ctx_tag & "\",";
    {% endif -%}
    {% endfor -%}
    set $!tags = substring($!tags, 0, strlen($!tags)-1);
    {% endif %}
    set $!tags = $!tags & "}";
    set $!iplocation!reputation_ctx_tags = "\"reputation_ctx_tags\":" & $!tags;

    {% if frontend.reputation_database_v4 -%}
    # If ethernet type is IP (v4)
    if $!impcap!ETH_type == 2048 then {
        action(type="mmdblookup" mmdbfile="{{frontend.reputation_database_v4}}" fields=[":src_reputation:!city!names!en"] key="!impcap!net_src_ip")
        action(type="mmdblookup" mmdbfile="{{frontend.reputation_database_v4}}" fields=[":dst_reputation:!city!names!en"] key="!impcap!net_dst_ip")
        {% if frontend.geoip_database -%}
        action(type="mmdblookup" mmdbfile="{{frontend.geoip_database}}" fields=[":src_iso_code:!country!iso_code",":src_city:!city!names!en",":src_country:!country!names!en",":src_location:!location"] key="!impcap!net_src_ip")
        action(type="mmdblookup" mmdbfile="{{frontend.geoip_database}}" fields=[":dst_iso_code:!country!iso_code",":dst_city:!city!names!en",":dst_country:!country!names!en",":dst_location:!location"] key="!impcap!net_dst_ip")
        {%- endif %}
    }

    {%- endif %}
    {% if frontend.reputation_database_v6 -%}
    # If ethernet type is IPv6
    if $!impcap!ETH_type == 34525 then {
        action(type="mmdblookup" mmdbfile="{{frontend.reputation_database_v6}}" fields=[":src_reputation:!city!names!en"] key="!impcap!net_src_ip")
        action(type="mmdblookup" mmdbfile="{{frontend.reputation_database_v6}}" fields=[":dst_reputation:!city!names!en"] key="!impcap!net_dst_ip")
    }

    {%- endif %}

    {% if darwin_actions %}

    {% if frontend.darwin_mode in ["both", "back"] -%}
    set $!advens!impcap!dns_names!darwin = "[";
    {% endif -%}

    {% for action in darwin_actions -%}
    {%- if action.filter_type in ["dgad", "lkup"] -%}
    # Custom call to {{action.filter_type}} for impcap dns_names
    foreach( $.name in $!impcap!dns_names ) do {
        reset $!tmp3 = $.name!qname;
        unset $!mmdarwin!{{action.filter_type}}_certitude;
        action( type="mmdarwin"
                key="{{action.filter_type}}_certitude"
                socketpath="{{ action.filter_socket }}"
                response="{{ frontend.darwin_mode }}"
                fields=["!tmp3"])

        {%- if frontend.darwin_mode in ["both", "back"] %}
        if cnum($!mmdarwin!{{action.filter_type}}_certitude) >= {{action.threshold}} and cnum($!mmdarwin!{{action.filter_type}}_certitude) < 101 then {
            set $!advens!impcap!dns_names!darwin = $!advens!impcap!dns_names!darwin & "{% for tag in action.enrichment_tags %}\"{{tag}}\",{% endfor %}";
        }
        {%- endif %}
    }
    {% endif -%}
    {% endfor %}
    {% if frontend.darwin_mode in ["both", "back"] -%}
    set $.ret = parse_json($!advens!impcap!dns_names!darwin & "]", "\$!advens!impcap!dns_names!darwin");
    {% endif -%}

    #Classic call
    {% include "rsyslog_darwin/ruleset.conf" %}
    {% endif -%}

    {% include "rsyslog_custom.conf" ignore missing %}

    {{ frontend.log_condition }}

    stop
}
