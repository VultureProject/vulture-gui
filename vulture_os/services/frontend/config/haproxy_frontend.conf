#This file is part of Vulture OS.
#

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################

{% if conf.mode == "http" and conf.enable_cache %}
cache cache_{{ conf.id }}
  total-max-size {{ conf.cache_total_max_size }}
  max-age {{ conf.cache_max_age }}
{% endif %}


{% if conf.mode in ["log", "filebeat"] -%}listen{%- else -%}frontend{%- endif %} {{ conf.name }}
    {% if conf.enabled %}enabled {% else %}disabled {% endif %}

    ### Listeners ###
    {% for listener in conf.listeners -%}
        {{ listener.generate_conf() }}
    {% endfor -%}
    mode{%- if conf.mode in ["log", "filebeat"] %} tcp{%- else %} {{ conf.mode }}{%- endif %}

    ### Logging ###
    {% if conf.mode in ["http","tcp"] and conf.enable_logging -%}
        option {{conf.mode}}log
        log {{ conf.unix_socket }} len 20000 local0 {{ conf.log_level }}
        {% if conf.mode == "http" -%}
        capture request header User-Agent len 1000
        capture request header Cookie len 5000
        declare capture request len 10000 id 2
        http-request capture req.body id 2
        http-request set-var(sess.body) capture.req.hdr(2)
        capture request header Content-Type len 1000
        capture request header Host len 255
        {%- endif %}
        log-format "{{ conf.log_format }}"
    {%- else -%}
        no log
    {%- endif %}

    ### Custom user configuration ###
    {{ conf.custom_haproxy_conf }}

    ### Timeouts ###
    timeout connect {{conf.timeout_connect}}ms
    timeout client {{conf.timeout_client}}s
    {% if conf.mode in ["log", "filebeat"] -%}
    timeout server 0
    {% endif -%}

    {% if conf.mode == "http" -%}
    timeout http-keep-alive {{conf.timeout_keep_alive}}

    {% if conf.headers -%}
    ### HTTP Headers ###
    {% for header in conf.headers -%}
    {% if header.enabled -%}
    {{ header.generate_conf() }}
    {% endif -%}
    {%- endfor %}
    {% endif -%}

    {% if conf.enable_cache and conf.enable_compression -%}
    # HTX Proxy is enabled with cache and compression
    option http-use-htx
    {% endif -%}

    {% if conf.enable_cache -%}
    ### Cache on ###
    filter cache cache_{{ conf.id }}
    http-request cache-use cache_{{ conf.id }}
    http-response cache-store cache_{{ conf.id }}
    {% endif -%}

    {% if conf.enable_compression -%}
    ### Compression on ###
    filter compression
    compression algo {{ conf.compression_algos }}
    compression type {{ conf.compression_mime_types }}
    {% endif -%}

    {% if conf.template -%}
    ### Error templates ###
    {{ conf.template }}
    {% endif -%}

    {% elif conf.mode in ["log", "filebeat"] -%}{# if conf.mode == "http" -#}
        {% for listener in conf.listeners -%}
            server server_{{ conf.name }}-{{loop.index}} {{listener.generate_server_conf()}}
        {% endfor -%}
    {% endif -%}{# elif conf.mode in ["log", "filebeat"] -#}


    ### ACLS ###
    {% if conf.access_controls_list -%}
    {% for acl in conf.access_controls_list %}
    {{ acl }}
    {% endfor %}
    {% endif -%}

    {% if conf.external_idps -%}
    ### IDP ACLs ###
    {% for authentication in conf.external_idps %}
    acl idp_{{authentication.id}}_host hdr(host) {{authentication.external_fqdn}}
    acl idp_{{authentication.id}}_host hdr(host) -m beg {{authentication.external_fqdn}}:
    {% endfor %}
    {% endif -%}

    ### Headers ACLs ###
    acl header_has_authent req.hdr(Authorization) -m found
    acl header_has_authent req.hdr(X-Vlt-Token) -m found
    acl request_has_authent req.hdr(Authorization) -m found
    acl request_has_authent req.hdr(X-Vlt-Token) -m found
    acl request_has_authent req.cook({{ global_config.portal_cookie_name }}) -m found


    {% if conf.workflows %}
    #################
    ### WORKFLOWS ###
    #################
    {% for workflow in conf.workflows %}
    ### Workflow {{workflow.name}} ACLs ###
    {%- if workflow.backend.mode == "http" %}
    acl workflow_{{workflow.id}}_host hdr(host) {{workflow.fqdn}}
    acl workflow_{{workflow.id}}_host hdr(host) -m beg {{workflow.fqdn}}:
    acl workflow_{{workflow.id}}_dir path -i -m beg {{ workflow.public_dir }}

    {%- if workflow.authentication %}
    # avoid redirections to portal on those paths
    acl workflow_{{workflow.id}}_dir_auth path -i -m beg {{ workflow.public_dir }}
    acl workflow_{{workflow.id}}_dir_auth path -i -m beg /templates/
    acl workflow_{{workflow.id}}_dir_auth path -i -m beg {{ workflow.public_dir }}{{global_config.public_token}}/
    # If user not on workflow.public_dir and is not authenticated, redirect to main url + redirect_url GET param
    acl auth_redirect_{{workflow.id}} path -i -m beg /templates/
    acl auth_redirect_{{workflow.id}} path -i -m beg {{ workflow.public_dir }}{{global_config.public_token}}/
    {% for repo in workflow.authentication.openid_repos -%}
    acl auth_redirect_{{workflow.id}} path /oauth2/callback/{{repo.id}}
    acl auth_redirect_{{workflow.id}} path /oauth2/start/{{repo.id}}
    {% endfor -%}
    {% endif -%}
    {% endif -%}
    {% endfor %}


    ### ACL rules ###
    {% for workflow in conf.workflows -%}
    {%- if workflow.backend.mode == "http" %}
    http-request set-var(req.is_workflow) int({{workflow.id}}) if workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir
    {%- endif -%}

    {%- if workflow.access_controls_deny|length -%}
    {% for acl in workflow.access_controls_deny %}
    {# if acl.deny -> deny or redirect if the ACL matches #}
    {%- if acl.deny %}
    {% for condition in acl.conditions %}
    {%- if conf.mode == "http" %}
    http-request deny if { var(req.is_workflow) -m int eq {{workflow.id}} }
    {%- elif conf.mode == "tcp" %}
    tcp-request connection reject if
    {%- endif %} {{ condition }}
    {%- endfor %}
    {# if not acl.deny -> deny or redirect unless (if not) the ACL matches #}
    {%- else %}
    {%- if conf.mode == "http" %}
    http-request deny unless !{ var(req.is_workflow) -m int eq {{workflow.id}} } ||
    {%- elif conf.mode == "tcp" %}
    tcp-request connection reject unless
    {%- endif %} {{ acl.conditions | join(" || ") }}
    {%- endif %}
    {%- endfor -%}
    {%- endif %}
    {%- endfor %}


    ### AUTH ###
    {% for workflow in conf.workflows -%}
    {% if workflow.authentication %}
    # Workflow {{workflow.name}}
    {% for repo in workflow.authentication.openid_repos -%}
    # Handle /oauth2/start and /oauth2/callback for {{repo.name}}
    {#- if workflow.fqdn and workflow.path == "{{w.path}}/oauth2/callback/{{repo.id_alea}}": #}
    {#- use portal + set url = /oauth2/callback/{{repo.id}} #}
    http-request set-var(req.use_portal) str("{{workflow.id}}") if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}oauth2/callback/{{repo.id_alea}} }
    http-request set-path /oauth2/callback/{{repo.id}} if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}oauth2/callback/{{repo.id_alea}} }
    {#- if workflow.fqdn and workflow.path == "{{w.path}}/oauth2/start?r={{repo.id}}": #}
    {#- use portal + set url = /oauth2/start/{{repo.id}} #}
    http-request set-var(req.use_portal) str("{{workflow.id}}") if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}oauth2/start } { url_param("repo") eq {{repo.id}} }
    http-request set-path /oauth2/start/{{repo.id}} if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}oauth2/start } { url_param("repo") eq {{repo.id}} }
    {% endfor -%}
    # Handle OAuth2 responder endpoints
    {% if workflow.authentication.enable_oauth -%}
    http-request set-var(req.use_portal) str("{{workflow.id}}") if workflow_{{workflow.id}}_host { path {{workflow.public_dir}}oauth2/userinfo }
    http-request replace-path {{workflow.public_dir}}(.*) /\1 if workflow_{{workflow.id}}_host { path {{workflow.public_dir}}oauth2/userinfo }
    {% endif -%}

    # Handle disconnect
    http-request set-var(req.use_portal) str("{{workflow.id}}") if workflow_{{workflow.id}}_host { url_reg {{workflow.disconnect_url}} }
    http-request set-path /vulture_disconnect if workflow_{{workflow.id}}_host { url_reg {{workflow.disconnect_url}} }
    # Handle self service
    http-request set-var(req.use_portal) str("{{workflow.id}}") if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}{{global_config.public_token}}/self }
    http-request replace-path {{workflow.public_dir}}{{global_config.public_token}}/(.*) /\1 if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}{{global_config.public_token}}/self }
    {% endif -%}
    {% endfor %}


    ### ACCESS ###
    {%- if conf.defender_enabled %}
    ### Defender activated ###
    http-request deny if { var(sess.defender.status) -m int gt 0 }
    {%- endif %}

    {% for workflow in conf.workflows -%}
    {% if workflow.authentication %}
    # Workflow {{workflow.name}}
    # Check session with LUA
    http-request lua.check_session_from_cookie "{{ global_config.portal_cookie_name }}" "{{workflow.id}}" {{workflow.authentication.auth_timeout}} if workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir { req.cook({{ global_config.portal_cookie_name }}) -m found }
    http-request lua.check_session_from_header "Authorization" "{{workflow.openid_client_ids | join(';')}}" 0 if workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir { req.hdr(Authorization) -m found }
    http-request lua.check_session_from_header "X-Vlt-Token" "{{workflow.openid_client_ids | join(';')}}" 0 if workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir { req.hdr(X-Vlt-Token) -m found }
    # Return gateway timeout in case of authentication check failure
    http-request deny deny_status 504 if workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir request_has_authent !{ var(req.session.check_ok) -m found }
    # Deny access in case of header authentication failure (through 'Authentication' or 'X-Vlt-Token' headers)
    http-request deny deny_status 401 hdr WWW-Authenticate "Bearer realm=\"{{workflow.fqdn}}\"" if workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir header_has_authent !{ var(req.session.authorized) -m bool } !{ var(req.use_portal) -m found } !auth_redirect_{{workflow.id}}
    {%- endif %}
    {%- if workflow.access_controls_302|length -%}
    ### 302 redirects ###
    {% for acl in workflow.access_controls_302 -%}
    {# if acl.redirect -> redirect or redirect if the ACL matches #}
    {%- if acl.redirect %}
    {% for condition in acl.conditions -%}
    http-request redirect location {{ acl.redirect_url }} code 302 if { var(req.is_workflow) -m int eq {{workflow.id}} } {{ condition }}
    {%- endfor %}
    {# if not acl.redirect -> redirect or redirect unless (if not) the ACL matches #}
    {%- else %}
    http-request redirect location {{ acl.redirect_url }} code 302 unless !{ var(req.is_workflow) -m int eq {{workflow.id}} } || {{ acl.conditions | join(" || ") }}
    {%- endif %}
    {%- endfor -%}
    {%- endif %}
    {%- if workflow.access_controls_301|length -%}
    ### 301 redirects ###
    {% for acl in workflow.access_controls_301 %}
    {# if acl.redirect -> redirect or redirect if the ACL matches #}
    {%- if acl.redirect %}
    {% for condition in acl.conditions %}
    http-request redirect location {{ acl.redirect_url }} code 301 if { var(req.is_workflow) -m int eq {{workflow.id}} } {{ condition }}
    {%- endfor %}
    {# if not acl.redirect -> redirect or redirect unless (if not) the ACL matches #}
    {%- else %}
    http-request redirect location {{ acl.redirect_url }} code 301 unless !{ var(req.is_workflow) -m int eq {{workflow.id}} } || {{ acl.conditions | join(" || ") }}
    {%- endif %}
    {%- endfor -%}
    {%- endif %}

    {% endfor %}{# for workflow in conf.workflows #}

    {% if conf.https_redirect %}
    ### Redirect http to https ###
    redirect scheme https code 301 if !{ ssl_fc }
    {% endif %}
    {%- endif %}{# if conf.workflows #}


    {% if conf.external_idps or conf.workflows -%}
    ################
    ### BACKENDS ###
    ################

    {% for authentication in conf.external_idps -%}
    ### IDP {{authentication.name}} ###
    use_backend idp_{{authentication.id}} if idp_{{authentication.id}}_host
    {% endfor -%}

    {% for workflow in conf.workflows -%}
    ### Workflow {{workflow.name}} ###
    {% if workflow.authentication -%}
    # Portals
    use_backend portal_{{workflow.id}} if !{ var(req.session.authorized) -m bool } workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir_auth
    use_backend portal_{{workflow.id}} if { var(req.use_portal) -m str "{{workflow.id}}" }
    {% endif -%}

    # Backends
    {% if conf.mode == "tcp" %}default{% else %}use{% endif -%}
    _backend {{ workflow.backend.name }}
        {%- if conf.mode == "http" %} if{% endif -%}
        {% if conf.mode == "http" %} workflow_{{ workflow.id }}_host workflow_{{workflow.id}}_dir{% endif %}

    {% endfor -%}
    {%- endif %}{# if conf.external_idps or conf.workflows #}


