#This file is part of Vulture OS.
#

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################

{% if conf.mode == "http" and conf.enable_cache %}
cache cache_{{ conf.id }}
  total-max-size {{ conf.cache_total_max_size }}
  max-age {{ conf.cache_max_age }}
{% endif %}


{% if conf.mode in ["log", "filebeat"] -%}listen{%- else -%}frontend{%- endif %} {{ conf.name }}
    {% if conf.enabled %}enabled {% else %}disabled {% endif %}

    ### Listeners ###
    {% for listener in conf.listeners -%}
        {{ listener.generate_conf() }}
    {% endfor -%}
    mode{%- if conf.mode in ["log", "filebeat"] %} tcp{%- else %} {{ conf.mode }}{%- endif %}

    ### Logging ###
    {% if conf.mode in ["http","tcp"] and conf.enable_logging -%}
        option {{conf.mode}}log
        log {{ conf.unix_socket }} len 20000 local0 {{ conf.log_level }}
        {% if conf.mode == "http" -%}
        capture request header User-Agent len 1000
        capture request header Cookie len 5000
        declare capture request len 10000 id 2
        http-request capture req.body id 2
        http-request set-var(sess.body) capture.req.hdr(2)
        capture request header Content-Type len 1000
        capture request header Host len 255
        {%- endif %}
        log-format "{{ conf.log_format }}"
    {%- else -%}
        no log
    {%- endif %}

    ### Custom user configuration ###
    {{ conf.custom_haproxy_conf }}

    ### Timeouts ###
    timeout client {{conf.timeout_client}}s
    {% if conf.mode in ["log", "filebeat"] -%}
    timeout server 60s
    {% endif -%}

    {% if conf.mode == "http" -%}
    timeout http-keep-alive {{conf.timeout_keep_alive}}

    # Mandatory directives for authentication
    http-request add-header X-Forwarded-Proto http if ! { ssl_fc }
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    {% if conf.headers -%}
    ### HTTP Headers ###
    {% for header in conf.headers -%}
    {% if header.enabled -%}
    {{ header.generate_conf() }}
    {% endif -%}
    {%- endfor %}
    {% endif -%}

    {% if conf.enable_cache and conf.enable_compression -%}
    # HTX Proxy is enabled with cache and compression
    option http-use-htx
    {% endif -%}

    {% if conf.enable_cache -%}
    ### Cache on ###
    filter cache cache_{{ conf.id }}
    http-request cache-use cache_{{ conf.id }}
    http-response cache-store cache_{{ conf.id }}
    {% endif -%}

    {% if conf.enable_compression -%}
    ### Compression on ###
    filter compression
    compression algo {{ conf.compression_algos }}
    compression type {{ conf.compression_mime_types }}
    {% endif -%}

    {% if conf.template -%}
    ### Error templates ###
    {{ conf.template }}
    {% endif -%}

    {% elif conf.mode in ["log", "filebeat"] -%} {# if conf.mode == "http" -#}
    {% if conf.healthcheck_service -%}
    option tcp-check
    tcp-check connect linger
    tcp-request connection reject if { nbsrv() lt 1 }
    {%- endif -%} {# if conf.healthcheck_service #}
    {% for listener in conf.listeners -%}
    server server_{{ conf.name }}-{{loop.index}} {{listener.generate_server_conf()}} {% if conf.healthcheck_service %}check inter 5s fastinter 1s downinter 1s fall 2 rise 2 observe layer4 on-marked-down shutdown-sessions{% endif %}
    {% endfor -%} {# for listener in conf.listeners #}
    {% endif -%} {# elif conf.mode in ["log", "filebeat"] -#}

    {% if conf.external_idps -%}
    ### IDP ACLs ###
    {% for authentication in conf.external_idps %}
    acl idp_{{authentication.id}}_host hdr(host) {{authentication.external_fqdn}}
    acl idp_{{authentication.id}}_host hdr(host) -m beg {{authentication.external_fqdn}}:
    {% endfor %}
    {% endif -%}


    {% if conf.workflows %}
    #################
    ### WORKFLOWS ###
    #################
    {% for workflow in conf.workflows %}
    ### Workflow {{workflow.name}} ACLs ###
    {%- if workflow.mode == "http" %}
    acl workflow_{{workflow.id}}_host hdr(host) {{workflow.fqdn}}
    acl workflow_{{workflow.id}}_host hdr(host) -m beg {{workflow.fqdn}}:
    acl workflow_{{workflow.id}}_dir path -i -m beg {{ workflow.public_dir }}
    {% endif %}
    {%- endfor %}

    ### CORS policies ###
    {% for workflow in conf.workflows %}
    {%- if workflow.mode == "http" and workflow.enable_cors_policy %}
    ### Workflow {{workflow.name}} CORS ###
    http-request lua.cors "{{','.join(workflow.cors_allowed_methods)}}" "{{workflow.cors_allowed_origins}}" "{{workflow.cors_allowed_headers}}" {{workflow.cors_max_age}} if workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir
    http-response lua.cors
    {%- endif %}
    {%- endfor %}

    {% if conf.https_redirect %}
    ### Redirect http to https ###
    redirect scheme https code 301 if !{ ssl_fc }
    {%- endif %}

    {%- endif %} {# if conf.workflows #}


    {% if conf.external_idps or conf.workflows -%}
    ################
    ### BACKENDS ###
    ################

    {% for authentication in conf.external_idps -%}
    ### IDP {{authentication.name}} ###
    use_backend idp_{{authentication.id}} if idp_{{authentication.id}}_host
    {% endfor -%} {# for authentication in conf.external_idps #}

    {% for workflow in conf.workflows -%}
    ### Workflow {{workflow.name}} ({{workflow.fqdn}}{{workflow.public_dir}}) ###
    {% if conf.mode == "tcp" %}default{% else %}use{% endif -%}
    _backend Workflow_{{workflow.id}}
        {%- if conf.mode == "http" %} if{% endif -%}
        {% if conf.mode == "http" %} workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir{% endif %}

    {% endfor -%} {# for workflow in conf.workflows #}
    {%- endif %} {# if conf.external_idps or conf.workflows #}

{%- for workflow in conf.workflows %}
### Workflow {{workflow.name}} internal backend ###
backend Workflow_{{workflow.id}}
    timeout connect {{workflow.timeout_connect}}ms
    timeout server {{workflow.timeout_server}}s
    mode {{ workflow.mode }}
    {% if conf.has_tls -%}http-request set-header X-Forwarded-Proto https{%- endif %}
    server {{workflow.backend_name}} unix@/var/sockets/haproxy/workflow_{{workflow.id}}.sock send-proxy-v2
{% endfor -%} {# for workflow in conf.workflows #}
{# end of file #}
