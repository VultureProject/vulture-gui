#This file is part of Vulture OS.
#

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################

{% if conf.mode == "http" and conf.enable_cache %}
cache cache_{{ conf.id }}
  total-max-size {{ conf.cache_total_max_size }}
  max-age {{ conf.cache_max_age }}
{% endif %}


{% if conf.mode in ["log", "filebeat"] -%}listen
{%- else -%}frontend
{%- endif %} {{ conf.name }}
    {% if conf.enabled %}enabled {% else %}disabled {% endif %}
    {% for listener in conf.listeners -%}
        {{ listener.generate_conf() }}
    {% endfor -%}
    mode
    {%- if conf.mode in ["log", "filebeat"] %} tcp
    {%- else %} {{ conf.mode }}
    {%- endif %}
    {% if conf.mode in ["http","tcp"] and conf.enable_logging -%}
        option {{conf.mode}}log
        log {{ conf.unix_socket }} len 20000 local0 {{ conf.log_level }}
        {% if conf.mode == "http" -%}
        capture request header User-Agent len 1000
        capture request header Cookie len 5000
        declare capture request len 10000 id 2
        http-request capture req.body id 2
        http-request set-var(sess.body) capture.req.hdr(2)
        capture request header Content-Type len 1000
        {%- endif %}
        log-format "{{ conf.log_format }}"
    {%- else -%}
        no log
    {%- endif %}

    # Custom conf
    {{ conf.custom_haproxy_conf }}

    {% if conf.https_redirect %}
    # Redirect to https
    redirect scheme https code 301 if !{ ssl_fc }
    {% endif %}

    # Timeouts
    timeout connect {{conf.timeout_connect}}ms
    timeout client {{conf.timeout_client}}s
    {% if conf.mode in ["log", "filebeat"] -%}
    timeout server 0
    {% endif %}
    {% if conf.mode == "http" -%}
    timeout http-keep-alive {{conf.timeout_keep_alive}}

    # HTTP Headers
    {% for header in conf.headers -%}
    {% if header.enabled -%}
    {{ header.generate_conf() }}
    {% endif %}
    {%- endfor %}
    # Mandatory directives for authentication
    http-request add-header X-Forwarded-Proto http if ! { ssl_fc }
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Port %[dst_port]

    {% if conf.enable_cache and conf.enable_compression -%}
    # HTX Proxy must be enable if both compression & cache
    option http-use-htx
    {% endif -%}
    {% if conf.enable_cache -%}
    # Cache
    filter cache cache_{{ conf.id }}
    http-request cache-use cache_{{ conf.id }}
    http-response cache-store cache_{{ conf.id }}
    {% endif -%}
    {% if conf.enable_compression -%}
    # Compression
    filter compression
    compression algo {{ conf.compression_algos }}
    compression type {{ conf.compression_mime_types }}
    {% endif -%}
    {% if conf.template -%}
    # Error files
    {{ conf.template }}
    {% endif -%}
    {% elif conf.mode in ["log", "filebeat"] -%}
        {% for listener in conf.listeners -%}
            server server_{{ conf.name }}-{{loop.index}} {{listener.generate_server_conf()}}
        {% endfor -%}
    {% endif -%}

    {% for acl in conf.access_controls_list %}
    {{ acl }}
    {% endfor %}

    {%- if conf.workflows %}
    # Workflow ACLs
    {%- for workflow in conf.workflows %}
    {%- if workflow.backend.mode == "http" %}
    acl workflow_{{workflow.id}}_host hdr(host) {{workflow.fqdn}}
    acl workflow_{{workflow.id}}_host hdr(host) -m beg {{workflow.fqdn}}:
    acl workflow_{{workflow.id}}_dir path -i -m beg {{ workflow.public_dir }}
    {%- endif -%}
    {% endfor %}
    {%- endif %}

    {# Namespace, for all vars to be modified in loops #}
    {%- set ns_reputation = namespace(reputation=false) -%}
    {%- set ns_user_agent = namespace(user_agent=false) -%}
    {%- set ns_defender = namespace(defender=false) -%}

    {%- if conf.workflows -%}
    {%- for workflow in conf.workflows -%}
    {%- if workflow.defender_policy -%}
    filter spoe engine mod_defender config {{workflow.defender_policy.get_spoe_filename()}}
    {%- set ns_defender.defender = true %}
    {%- endif %}
    {% endfor %}

    {%- if ns_defender.defender %}
    http-request deny if { var(sess.defender.status) -m int gt 0 }
    {%- endif %}

    {% for workflow in conf.workflows -%}
    {%- if workflow.access_controls_deny|length -%}
    {% for acl in workflow.access_controls_deny %}
    {% for condition in acl.conditions %}
    {% if conf.mode == "http" %}http-request deny if workflow_{{ workflow.id }}_host workflow_{{ workflow.id }}_dir{% elif conf.mode == "tcp"%}tcp-request connection reject{% endif %} {{ condition }}
    {% endfor %}
    {%- endfor -%}
    {% endif %}

    {%- if workflow.access_controls_302|length -%}
    {% for acl in workflow.access_controls_302 %}
    {% for condition in acl.conditions %}
    http-request redirect location {{ acl.redirect_url }} code 302 if workflow_{{ workflow.id }}_host workflow_{{ workflow.id }}_dir {{ condition }}
    {% endfor %}
    {%- endfor -%}
    {% endif %}

    {%- if workflow.access_controls_301|length -%}
    {% for acl in workflow.access_controls_301 %}
    {% for condition in acl.conditions %}
    http-request redirect location {{ acl.redirect_url }} code 301 if workflow_{{ workflow.id }}_host workflow_{{ workflow.id }}_dir {{ condition }}
    {% endfor %}
    {%- endfor -%}
    {% endif %}

    {% for repo in workflow.authentication.openid_repos %}
        # Handle /oauth2/token, /oauth2/....
        {# if workflow.fqdn and workflow.path == "{{w.path}}/oauth2/callback/{{repo.id_alea}}": #}
        {# use portal + set url = /oauth2/callback/{{repo.id}} #}
        http-request set-path /oauth2/callback/{{repo.id}} if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}oauth2/callback/{{repo.id_alea}} }
        use_backend portal_{{workflow.id}} if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}oauth2/callback/{{repo.id_alea}} }

        {# if workflow.fqdn and workflow.path == "{{w.path}}/oauth2/start?r={{repo.id}}": #}
        {# use portal + set url = /oauth2/start/{{repo.id}} #}
        http-request set-uri /oauth2/start/{{repo.id}} if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}oauth2/start } { url_param("repo") eq {{repo.id}} }
        use_backend portal_{{workflow.id}} if workflow_{{workflow.id}}_host { path -i -m beg {{workflow.public_dir}}oauth2/start } { url_param("repo") eq {{repo.id}} }
    {% endfor %}

    {% if workflow.authentication %}
    # Session verification
    http-request set-var(proc.app_id) str("{{workflow.id}}") if workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir
    filter spoe engine session config {{ conf.CONF_PATH }}/spoe_session.txt
    # In case of SPOE error : Return Gateway-Timeout
    http-request deny deny_status 504 if { var(txn.session.error) -m int gt 0 } workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir
    # If user not authenticated - use portal
    use_backend portal_{{workflow.id}} if ! { var(sess.session.ip_score) -m int eq 1 } workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir
    {% endif %}

    # Backends
    {% if conf.mode == "tcp" %}default{% else %}use{% endif -%}
    _backend {{ workflow.backend.name }}
        {%- if conf.mode == "http" %} if{% endif -%}
        {% if conf.mode == "http" %} workflow_{{ workflow.id }}_host workflow_{{workflow.id}}_dir{% endif %}

    {% endfor %}

    # WAF Rules
    {% for serialized_blwl in conf.serialized_blwl_list %}
    {{ serialized_blwl }}
    {% endfor %}

    {% endif %}

