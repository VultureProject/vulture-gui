#This file is part of Vulture OS.
# NEW FILE

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################

{% for endpoint in endpoints %}
# Workflow {{ endpoint.name }}
[session_{{endpoint.id}}]

spoe-agent session-agent
        messages check-session_{{endpoint.id}} check-session_oauth_{{endpoint.id}} check-session_oauth_legacy_{{endpoint.id}}

        option var-prefix session

        timeout hello      500ms
        timeout idle       30s
        timeout processing 5s

        option set-on-error error

        use-backend backend_spoa_session

# First choice: check for portal cookie presence
spoe-message check-session_{{endpoint.id}}
    acl workflow_{{endpoint.id}}_host hdr(host) {{endpoint.fqdn}}
    acl workflow_{{endpoint.id}}_host hdr(host) -m beg {{endpoint.fqdn}}:
    acl workflow_{{endpoint.id}}_dir path -i -m beg {{ endpoint.public_dir }}
    acl workflow_{{endpoint.id}}_cook req.cook({{ global_config.portal_cookie_name }}) -m found
    args req.cook({{ global_config.portal_cookie_name }}) str("{{endpoint.id}}") str("{{endpoint.auth_timeout}}")
    event on-frontend-http-request if workflow_{{endpoint.id}}_host workflow_{{endpoint.id}}_dir workflow_{{endpoint.id}}_cook

# Second choice: if it doesn't exist, check for custom X-Vlt-Token
spoe-message check-session_oauth_legacy_{{endpoint.id}}
    acl workflow_{{endpoint.id}}_host hdr(host) {{endpoint.fqdn}}
    acl workflow_{{endpoint.id}}_host hdr(host) -m beg {{endpoint.fqdn}}:
    acl workflow_{{endpoint.id}}_dir path -i -m beg {{ endpoint.public_dir }}
    acl workflow_{{endpoint.id}}_header req.hdr(X-Vlt-Token) -m found
    acl workflow_{{endpoint.id}}_cook req.cook({{ global_config.portal_cookie_name }}) -m found
    # remove Authorization type from header value (such as 'Bearer'...) and prefix with 'oauth2_' for redis querying
    args req.hdr(X-Vlt-Token),field(-1,' '),regsub('^','oauth2_') str("{{endpoint.oauth_repositories_id | join(';')}}")
    event on-frontend-http-request if workflow_{{endpoint.id}}_host workflow_{{endpoint.id}}_dir workflow_{{endpoint.id}}_header !workflow_{{endpoint.id}}_cook

# Final choice: if neither portal cookie nor X-Vlt-Token header are found, search for Authorization token
spoe-message check-session_oauth_{{endpoint.id}}
    acl workflow_{{endpoint.id}}_host hdr(host) {{endpoint.fqdn}}
    acl workflow_{{endpoint.id}}_host hdr(host) -m beg {{endpoint.fqdn}}:
    acl workflow_{{endpoint.id}}_dir path -i -m beg {{ endpoint.public_dir }}
    acl workflow_{{endpoint.id}}_header req.hdr(Authorization) -m found
    acl workflow_{{endpoint.id}}_header req.hdr(X-Vlt-Token) ! -m found
    acl workflow_{{endpoint.id}}_cook req.cook({{ global_config.portal_cookie_name }}) -m found
    # remove Authorization type from header value (such as 'Bearer'...) and prefix with 'oauth2_' for redis querying
    args req.hdr(Authorization),field(-1,' '),regsub('^','oauth2_') str("{{endpoint.oauth_repositories_id | join(';')}}")
    event on-frontend-http-request if workflow_{{endpoint.id}}_host workflow_{{endpoint.id}}_dir workflow_{{endpoint.id}}_header !workflow_{{endpoint.id}}_cook
{% endfor %}

