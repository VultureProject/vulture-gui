#This file is part of Vulture OS.
#

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################

$workDirectory /var/tmp

module(load="immark")   # provides --MARK-- message capability

# Input Modules
module(load="imfile")
module(load="imudp")
module(load="imtcp" {% if max_tcp_listeners > 0 %}MaxListeners="{{ max_tcp_listeners }}"{% endif %})
module(load="imrelp")
module(load="imuxsock")
## Activate this line instead if you want pstats logs written every second to (rsyslog jail's) /var/log/pstats-sec
# module(load="impstats" format="json" interval="1" log.file="/var/log/pstats-sec" ruleset="ruleset-pstats")
module(load="impstats" format="json" interval="1" ruleset="ruleset-pstats")
module(load="imkafka")
module(load="imhiredis")

# Message Modification Modules
module(load="mmjsonparse")
module(load="mmnormalize")
module(load="mmdblookup")

# Output Modules
module(load="builtin:omfile")
module(load="omelasticsearch")
module(load="omhiredis")
module(load="ommongodb")
module(load="omrelp")
module(load="omkafka")
module(load="omuxsock")

# Log Forwarders templates used to render file name or index name
{% for log_forwarder in log_forwarders -%}
{{ log_forwarder.get_rsyslog_template() }}
{% endfor %}


# For each LOG frontend, set input & template
{% for frontend in frontends -%}

# Configuration of frontend {{ frontend.name }}
{%- if frontend.enabled -%}
{%- if frontend.mode == "filebeat" %}
    input(type="imhiredis"
        Server="{{ frontend.redis_server }}"
        Port="{{ frontend.redis_port }}"
        Password="{{ frontend.redis_password }}"
        Key="filebeat_{{ frontend.tenants_config.id }}_{{ frontend.id }}"
        Mode="queue"
        Uselpop="on"
        batchsize="{{ frontend.redis_batch_size }}"
        RuleSet="{{ frontend.get_ruleset() }}")
{%- elif frontend.mode == "log" -%}
    {% if frontend.listening_mode == "file" %}
        input(type="imfile"
            Tag="{{ frontend.tags[0] }}"
            File="{{ frontend.file_path }}"
            RuleSet="{{ frontend.get_ruleset() }}")
    {% elif frontend.listening_mode == "api" %}
        input(type="imtcp"
            {{ frontend.generate_api_rsyslog_conf() }}
            RuleSet="{{ frontend.get_ruleset() }}")
    {% elif frontend.listening_mode == "kafka" %}
        input(type="imkafka"
            Broker={{ frontend.kafka_brokers|tojson }}
            Topic="{{ frontend.kafka_topic }}"
            ConsumerGroup="{{ frontend.kafka_consumer_group }}"
            {% if frontend.kafka_options %}confParam={{ frontend.kafka_options|tojson }}{% endif %}
            RuleSet="{{ frontend.get_ruleset() }}")
    {% elif frontend.listening_mode == "redis" %}
        input(type="imhiredis"
            Server="{{ frontend.redis_server }}"
            Port="{{ frontend.redis_port }}"
            Key="{{ frontend.redis_key }}"
            Mode="{{ frontend.redis_mode }}"
            Uselpop="{% if frontend.redis_use_lpop %}on{% else %}off{% endif %}"
            Password="{{ frontend.redis_password }}"
            {% if frontend.redis_mode == "stream" -%}
            {%- if frontend.redis_stream_consumerGroup -%}
            stream.consumerGroup="{{ frontend.redis_stream_consumerGroup }}"
            stream.consumerName="{{ frontend.redis_stream_consumerName }}"
            stream.consumerACK="{% if frontend.redis_stream_acknowledge %}on{% else %}off{% endif %}"
            stream.autoclaimIdleTime="{{ frontend.redis_stream_reclaim_timeout }}"
            {% endif -%}
            stream.readFrom="{{ frontend.redis_stream_startID }}"
            {%- endif %}
            batchsize="{{ frontend.redis_batch_size }}"
            RuleSet="{{ frontend.get_ruleset() }}")
    {% endif %}
    {% for listener in frontend.listener_set.filter(network_address__nic__node=node) %}
        {% if "udp" in frontend.listening_mode %}
            input(type="imudp"
                {{ listener.generate_rsyslog_conf() }}
                RuleSet="{{ frontend.get_ruleset() }}")
        {% elif "tcp" in frontend.listening_mode %}
            input(type="imtcp"
                SupportOctetCountedFraming="{% if frontend.disable_octet_counting_framing %}off{% else %}on{% endif %}"
                {%- if frontend.custom_tl_frame_delimiter != -1 %}
                AddtlFrameDelimiter="{{ frontend.custom_tl_frame_delimiter }}"
                {%- endif %}
                {{ listener.generate_rsyslog_conf() }}
                {%- if frontend.ratelimit_interval %}
                RateLimit.Interval="{{ frontend.ratelimit_interval }}"
                {%- endif %}
                {%- if frontend.ratelimit_burst %}
                RateLimit.Burst="{{ frontend.ratelimit_burst }}"
                {%- endif %}
                RuleSet="{{ frontend.get_ruleset() }}")
        {% elif "relp" in frontend.listening_mode %}
            input(type="imrelp"
                {{ listener.generate_rsyslog_conf() }}
                RuleSet="{{ frontend.get_ruleset() }}")
        {% endif %}
    {% endfor %} {# for listener in frontend.listener_set.filter(network_address__nic__node=node) #}
{%- elif frontend.mode in ["http", "tcp"] and frontend.enable_logging %} {# elif frontend.mode == "log" #}
    input(type="imuxsock"
        Socket="{{ frontend.get_unix_socket() }}"
        CreatePath="on"
        RuleSet="{{ frontend.get_ruleset() }}")
{%- endif %} {# elif frontend.mode in ["http", "tcp"] #}
{%- endif %} {# if frontend.enabled #}
{% endfor %} {# for frontend in frontends #}
