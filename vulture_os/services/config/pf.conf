#This file is part of Vulture OS.
#
#Vulture 3 is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#Vulture 3 is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with Vulture 3.  If not, see http://www.gnu.org/licenses/.

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################


# This is the global, generic pf configuration
set limit { states {{node.pf_limit_states}}, frags {{node.pf_limit_frags}}, src-nodes {{node.pf_limit_src}} }
set optimization aggressive
set fingerprints "/etc/pf.os"
scrub in all
# Custom parameters
{{ node.pf_custom_param_config }}
##############################################

#Jails Masquerading
{% if ":" in node.internet_ip %}
nat proto tcp from { fd00::202,fd00::203,fd00::204,fd00::205,fd00::206,fd00::207 } to any port 80 -> {{node.internet_ip}}  # jails -> HTTP
nat proto tcp from { fd00::202,fd00::203,fd00::204,fd00::205,fd00::206,fd00::207 } to any port 443 -> {{node.internet_ip}}  # jails -> HTTPS
{% for proxy_ip,proxy_port in proxy -%}
{% if ":" in proxy_ip %}
nat proto tcp from { fd00::202,fd00::203,fd00::204,fd00::205,fd00::206,fd00::207 } to {{proxy_ip}} port {{proxy_port}} -> {{node.internet_ip}} # jails -> Proxy
{% endif %}
{% endfor -%}
{% else %}
nat proto tcp from { 127.0.0.2,127.0.0.3,127.0.0.4,127.0.0.5,127.0.0.6,127.0.0.7 } to any port 80 -> {{node.internet_ip}}  # jails -> HTTP
nat proto tcp from { 127.0.0.2,127.0.0.3,127.0.0.4,127.0.0.5,127.0.0.6,127.0.0.7 } to any port 443 -> {{node.internet_ip}}  # jails -> HTTPS
{% for proxy_ip,proxy_port in proxy -%}
{% if ":" not in proxy_ip %}
nat proto tcp from { 127.0.0.2,127.0.0.3,127.0.0.4,127.0.0.5,127.0.0.6,127.0.0.7 } to {{proxy_ip}} port {{proxy_port}} -> {{node.internet_ip}} # jails -> Proxy
{% endif %}
{% endfor -%}
{% endif %}

# Intercluster/management connexions
{% if ":" in node.management_ip %}
nat proto tcp from fd00::202 to {{node.management_ip}} port 9091 -> {{node.management_ip}}  # Mongodb
nat proto tcp from fd00::204 to {{node.management_ip}} port 9091 -> {{node.management_ip}}  # Rsyslog -> Mongodb
nat proto tcp from fd00::203 to {{node.management_ip}} port 6379 -> {{node.management_ip}}  # Sentinel -> Redis
nat proto tcp from fd00::203 to {{node.management_ip}} port 26379 -> {{node.management_ip}}  # Sentinel -> Redis
{% for n in nodes -%}
nat proto tcp from fd00::202 to {{n.management_ip}} port 9091  -> {{node.management_ip}} # Mongodb cluster interconnection
nat proto tcp from fd00::203 to {{n.management_ip}} port 6379  -> {{node.management_ip}} # Redis cluster interconnection
nat proto tcp from fd00::203 to {{n.management_ip}} port 26379 -> {{node.management_ip}} # Sentinel cluster interconnection
nat proto tcp from fd00::204 to {{n.management_ip}} port 9091 -> {{node.management_ip}}  # Rsyslog -> Mongodb cluster
nat proto tcp from fd00::205 to {{n.management_ip}} port 9000 -> {{node.management_ip}}  # HAProxy -> Portal cluster
nat proto tcp from fd00::205 to {{n.management_ip}} port 6379 -> {{node.management_ip}}  # HAProxy -> Redis cluster
{% endfor %}
{% else %}
nat proto tcp from 127.0.0.2 to {{node.management_ip}} port 9091 -> {{node.management_ip}}  # Mongodb
nat proto tcp from 127.0.0.4 to {{node.management_ip}} port 9091 -> {{node.management_ip}}  # Rsyslog -> Mongodb
nat proto tcp from 127.0.0.3 to {{node.management_ip}} port 6379 -> {{node.management_ip}}  # Sentinel -> Redis
nat proto tcp from 127.0.0.3 to {{node.management_ip}} port 26379 -> {{node.management_ip}}  # Sentinel -> Redis
{% for n in nodes -%}
nat proto tcp from 127.0.0.2 to {{n.management_ip}} port 9091  -> {{node.management_ip}} # Mongodb cluster interconnection
nat proto tcp from 127.0.0.3 to {{n.management_ip}} port 6379  -> {{node.management_ip}} # Redis cluster interconnection
nat proto tcp from 127.0.0.3 to {{n.management_ip}} port 26379 -> {{node.management_ip}} # Sentinel cluster interconnection
nat proto tcp from 127.0.0.4 to {{n.management_ip}} port 9091 -> {{node.management_ip}}  # Rsyslog -> Mongodb cluster
nat proto tcp from 127.0.0.5 to {{n.management_ip}} port 9000 -> {{node.management_ip}}  # HAProxy -> Portal cluster
nat proto tcp from 127.0.0.5 to {{n.management_ip}} port 6379 -> {{node.management_ip}}  # HAProxy -> Redis cluster
{% endfor %}
{% endif %}

# Rsyslog forwarders
{% for proto, ip, port, route_ipv4, route_ipv6 in node.get_forwarders_enabled %}
{%- if route_ipv6 %}
nat proto {{proto}} from fd00::204 to {{ip}} port {{port}} -> {{route_ipv6}}
{%- endif %}
{%- if route_ipv4 %}
nat proto {{proto}} from 127.0.0.4 to {{ip}} port {{port}} -> {{route_ipv4}}
{%- endif %}
{% endfor %}
# HAProxy backends
{% for family, proto, ip, port in node.get_backends_enabled %}
{% if ":" in node.backends_outgoing_ip %}
nat proto {{proto}} from { fd00::205, fd00::206, fd00::207 } to {{ip}} port {{port}} -> {{node.backends_outgoing_ip}}
{% else %}
nat proto {{proto}} from { 127.0.0.5, 127.0.0.6, 127.0.0.7 } to {{ip}} port {{port}} -> {{node.backends_outgoing_ip}}
{% endif %}
{% endfor %}

# Custom configuration
{{ node.pf_custom_nat_config }}
###################

# GUI & portal jails outputs
{% if ":" in node.management_ip %}
nat from { fd00::206, fd00::207 } to any -> {{node.management_ip}}  # GUI/Portal jails -> any
{% else %}
nat from { 127.0.0.6, 127.0.0.7 } to any -> {{node.management_ip}}  # GUI/Portal jails -> any
{% endif %}


#Local communication to Jails
{% if ":" in node.management_ip %}
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 9091 -> fd00::202
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 6379 -> fd00::203
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 26379 -> fd00::203
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 1978 -> fd00::205
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 8000 -> fd00::206
{% else %}
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 9091 -> 127.0.0.2
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 6379 -> 127.0.0.3
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 26379 -> 127.0.0.3
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 1978 -> 127.0.0.5
rdr proto tcp from {{ node.management_ip }} to {{ node.management_ip }} port 8000 -> 127.0.0.6
{% endif %}
#############################

#Inter-cluster communications
#Members can contact our local services (that are binded on 127.0.0.1)

{%- for n in nodes -%}
{% if ":" in node.management_ip %}
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 9091 -> fd00::202 port 9091
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 6379 -> fd00::203 port 6379
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 26379 -> fd00::203 port 26379
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 8000 -> fd00::206 port 8000
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 9000 -> fd00::207 port 9000
{% else %}
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 9091 -> 127.0.0.2 port 9091
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 6379 -> 127.0.0.3 port 6379
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 26379 -> 127.0.0.3 port 26379
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 8000 -> 127.0.0.6 port 8000
rdr proto tcp from {{n.management_ip}} to {{ node.management_ip }} port 9000 -> 127.0.0.7 port 9000
{% endif %}
{%- endfor -%}
#############################

# Incoming trafic on Admin GUI
{% if global_config.pf_admin_restrict == 'any' -%}
{% if ":" in node.management_ip %}
rdr log proto tcp from any to {{ node.management_ip }} port { 8000 } -> fd00::206 port 8000
{% else %}
rdr log proto tcp from any to {{ node.management_ip }} port { 8000 } -> 127.0.0.6 port 8000
{% endif %}
##
{% else -%}
{% if ":" in node.management_ip %}
rdr log proto tcp from { {{global_config.pf_admin_restrict}} }  to {{ node.management_ip }} port { 8000 } -> fd00::206 port 8000
{% else %}
rdr log proto tcp from { {{global_config.pf_admin_restrict}} }  to {{ node.management_ip }} port { 8000 } -> 127.0.0.6 port 8000
{% endif %}
{% endif -%}
###############################

# Incoming redirection rules for Listeners
{% for source,destination,port,nat_port,proto,family,max_src,max_rate in node.get_listeners_enabled -%}
    {% if "tcp" in proto -%}
        rdr proto tcp from { {{source}} } to {{destination}} port {{port}} -> {{jail_addresses['haproxy'][family]}} port {{nat_port}}
    {% endif %}
    {% if "udp" in proto -%}
        rdr proto udp from { {{source}} } to {{destination}} port {{port}} -> {{jail_addresses['rsyslog'][family]}} port {{nat_port}}
    {% endif %}
{% endfor %}
##########################################

# Custom configuration
{{ node.pf_custom_rdr_config }}
######################

# Whitelist / Blacklist
table <vulture_whitelist> persist file "/usr/local/etc/pf.whitelist.conf"
table <vulture_blacklist> persist file "/usr/local/etc/pf.blacklist.conf"

pass in quick from <vulture_whitelist>
block in quick from <vulture_blacklist>
#######################

# Generic directives
pass quick on lo0 all
pass quick on lo1 all
pass quick on lo2 all
pass quick on lo3 all
pass quick on lo4 all
pass quick on lo5 all
pass quick on lo6 all

# Do not log broadcast
block in quick from any to 255.255.255.255
{% for intf in node.network_interfaces %}
{% if intf.has_ipv4 and intf.dev != 'tun0' %}block in quick from any to {{ intf.dev }}:broadcast {% endif %}
# Block invalid tcp flags combination on interface {{intf.dev}}
block in quick on {{intf.dev}} proto tcp flags FUP/WEUAPRSF
block in quick on {{intf.dev}} proto tcp flags WEUAPRSF/WEUAPRSF
block in quick on {{intf.dev}} proto tcp flags SRAFU/WEUAPRSF
block in quick on {{intf.dev}} proto tcp flags /WEUAPRSF
block in quick on {{intf.dev}} proto tcp flags SR/SR
block in quick on {{intf.dev}} proto tcp flags SF/SF
block in quick on {{intf.dev}} proto tcp from any to any flags FUP/FUP
{% endfor %}
block in log all
# Packet too big (type 2)
# Neighbor Discovery Protocol (NDP) (types 133-137):
#   Router Solicitation (RS), Router Advertisement (RA)
#   Neighbor Solicitation (NS), Neighbor Advertisement (NA)
#   Route Redirection
pass in quick inet6 proto ipv6-icmp icmp6-type { 2, 133, 134, 135, 136, 137 } keep state
#pass out proto icmp6 all
pass out quick all keep state
####################

# Custom config of node
{{ node.pf_custom_config }}
#######################

#pass in quick proto udp from any to port 123


# Incoming trafic on Admin GUI
{% if global_config.pf_admin_restrict == 'any' -%}
{% if ":" in node.management_ip %}
pass log proto tcp from any to fd00::206 port 8000
{% else %}
pass log proto tcp from any to 127.0.0.6 port 8000
{% endif %}
##
{% else -%}
{% if ":" in node.management_ip %}
pass log proto tcp from { {{global_config.pf_admin_restrict}} } to fd00::206 port 8000
{% else %}
pass log proto tcp from { {{global_config.pf_admin_restrict}} } to 127.0.0.6 port 8000
{% endif %}
{% endif -%}
###############################

# Cluster interconnexions
{% for n in nodes -%}
{% if ":" in n.management_ip %}
pass quick proto tcp from {{n.management_ip}} to fd00::202 port 9091            # Mongodb
pass quick proto tcp from {{n.management_ip}} to fd00::203 port { 6379, 26379 } # Redis, Sentinel
pass quick proto tcp from {{n.management_ip}} to fd00::207 port 9000            # Portal
{% else %}
pass quick proto tcp from {{n.management_ip}} to 127.0.0.2 port 9091            # Mongodb
pass quick proto tcp from {{n.management_ip}} to 127.0.0.3 port { 6379, 26379 } # Redis, Sentinel
pass quick proto tcp from {{n.management_ip}} to 127.0.0.7 port { 9000 }        # Portal
{% endif %}
{% endfor %}
###############################

# Incoming trafic on SSH
{% if global_config.pf_ssh_restrict == 'any' -%}
    pass log quick proto tcp from any to any port 22 flags S/SA keep state \
(max-src-conn 10, max-src-conn-rate 3/5, overload <vulture_blacklist> flush global)
{% else -%}
    pass log quick proto tcp from { {{global_config.pf_ssh_restrict}} } to any port { 22 } flags S/SA keep state \
(max-src-conn 10, max-src-conn-rate 3/5, overload <vulture_blacklist> flush global)
{% endif -%}
#########################

# Listeners configuration
{% for source,destination,port,nat_port,proto,family,max_src,max_rate in node.get_listeners_enabled %}
    {%- if "tcp" in proto %}
pass quick {{family}} proto tcp from { {{source}} } to {{jail_addresses['haproxy'][family]}} port {{nat_port}} keep state \
    {% if max_src != 0 or max_rate != 0 %}({% if max_src != 0 %}max-src-conn {{max_src}},{% endif %} {% if max_rate != 0 %}max-src-conn-rate {{max_rate}}/1,{% endif %} overload <vulture_blacklist> flush global){% endif %}
# On TCP, HAProxy -> Rsyslog
pass quick {{family}} proto tcp from {{jail_addresses['haproxy'][family]}} to {{jail_addresses['rsyslog'][family]}} port {{nat_port}}
    {%- endif %}
    {%- if "udp" in proto %}
# On UDP, Rsyslog listen directly
pass quick {{family}} proto udp from { {{source}} } to {{jail_addresses['rsyslog'][family]}} port {{nat_port}} keep state \
    {% if max_src != 0 or max_rate != 0 %}({% if max_src != 0 %}max-src-conn {{max_src}},{% endif %} {% if max_rate != 0 %}max-src-conn-rate {{max_rate}}/1,{% endif %} overload <vulture_blacklist> flush global){% endif %}
    {%- endif %}
{% endfor -%}
#########################

# Jails interconnections
pass quick proto tcp from haproxy to portal port 9000

#########################
