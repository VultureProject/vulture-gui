#This file is part of Vulture OS.
#

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################


frontend Internal_{{conf.name.replace(' ', '_')}}
    bind unix@/var/sockets/haproxy/{{conf.name.replace(' ', '_')}}.sock
    {% if conf.backend.mode == "http" %}mode http{% endif %}


    ### ACLS ###
    {% if conf.access_controls_list -%}
    {% for acl in conf.access_controls_list %}
    {{ acl }}
    {% endfor %}
    {% endif -%}


    ### Headers ACLs ###
    acl header_has_authent req.hdr(Authorization) -m found
    acl header_has_authent req.hdr(X-Vlt-Token) -m found
    acl request_has_authent req.hdr(Authorization) -m found
    acl request_has_authent req.hdr(X-Vlt-Token) -m found
    acl request_has_authent req.cook({{ global_config.portal_cookie_name }}) -m found


    ### Workflow ACLs ###
    {%- if conf.backend.mode == "http" %}
    acl workflow_{{conf.id}}_host hdr(host) {{conf.fqdn}}
    acl workflow_{{conf.id}}_host hdr(host) -m beg {{conf.fqdn}}:
    acl workflow_{{conf.id}}_dir path -i -m beg {{ conf.public_dir }}

    {%- if conf.authentication %}
    # avoid redirections to portal on those paths
    acl workflow_{{conf.id}}_dir_auth path -i -m beg {{ conf.public_dir }}
    acl workflow_{{conf.id}}_dir_auth path -i -m beg /templates/
    acl workflow_{{conf.id}}_dir_auth path -i -m beg {{ conf.public_dir }}{{global_config.public_token}}/
    # If user not on conf.public_dir and is not authenticated, redirect to main url + redirect_url GET param
    acl auth_redirect_{{conf.id}} path -i -m beg /templates/
    acl auth_redirect_{{conf.id}} path -i -m beg {{ conf.public_dir }}{{global_config.public_token}}/
    {% for repo in conf.authentication.openid_repos -%}
    acl auth_redirect_{{conf.id}} path /oauth2/callback/{{repo.id}}
    acl auth_redirect_{{conf.id}} path /oauth2/start/{{repo.id}}
    {% endfor -%}
    {% endif -%}
    {% endif %}


    ### ACL rules ###
    {%- if conf.backend.mode == "http" %}
    http-request set-var(req.is_workflow) int({{conf.id}}) if workflow_{{conf.id}}_host workflow_{{conf.id}}_dir
    {%- endif -%}

    {%- if conf.access_controls_deny|length -%}
    {% for acl in conf.access_controls_deny -%}
    {# if acl.deny -> deny or redirect if the ACL matches #}
    {%- if acl.deny %}
    {% for condition in acl.conditions %}
    {%- if conf.mode == "http" %}
    http-request deny if { var(req.is_workflow) -m int eq {{conf.id}} }
    {%- elif conf.mode == "tcp" %}
    tcp-request connection reject if
    {%- endif %} {{ condition }}
    {%- endfor %} {# for condition in acl.conditions #}
    {# if not acl.deny -> deny or redirect unless (if not) the ACL matches #}
    {%- else %}
    {%- if conf.mode == "http" %}
    http-request deny unless !{ var(req.is_workflow) -m int eq {{conf.id}} } ||
    {%- elif conf.mode == "tcp" %}
    tcp-request connection reject unless
    {%- endif %} {{ acl.conditions | join(" || ") }}
    {%- endif %}
    {%- endfor %} {# for acl in conf.access_controls_deny #}
    {% endif %} {# if conf.access_controls_deny|length #}


    ### AUTH ###
    {%- if conf.authentication %}
    {% for repo in conf.authentication.openid_repos -%}
    # Handle /oauth2/start and /oauth2/callback for {{repo.name}}
    {#- if conf.fqdn and conf.path == "{{w.path}}/oauth2/callback/{{repo.id_alea}}": #}
    {#- use portal + set url = /oauth2/callback/{{repo.id}} #}
    http-request set-var(req.use_portal) str("{{conf.id}}") if workflow_{{conf.id}}_host { path -i -m beg {{conf.public_dir}}oauth2/callback/{{repo.id_alea}} }
    http-request set-path /oauth2/callback/{{repo.id}} if workflow_{{conf.id}}_host { path -i -m beg {{conf.public_dir}}oauth2/callback/{{repo.id_alea}} }
    {#- if conf.fqdn and conf.path == "{{w.path}}/oauth2/start?r={{repo.id}}": #}
    {#- use portal + set url = /oauth2/start/{{repo.id}} #}
    http-request set-var(req.use_portal) str("{{conf.id}}") if workflow_{{conf.id}}_host { path -i -m beg {{conf.public_dir}}oauth2/start } { url_param("repo") eq {{repo.id}} }
    http-request set-path /oauth2/start/{{repo.id}} if workflow_{{conf.id}}_host { path -i -m beg {{conf.public_dir}}oauth2/start } { url_param("repo") eq {{repo.id}} }
    {% endfor -%}
    # Handle OAuth2 responder endpoints
    {% if conf.authentication.enable_oauth -%}
    http-request set-var(req.use_portal) str("{{conf.id}}") if workflow_{{conf.id}}_host { path {{conf.public_dir}}oauth2/userinfo }
    http-request replace-path {{conf.public_dir}}(.*) /\1 if workflow_{{conf.id}}_host { path {{conf.public_dir}}oauth2/userinfo }
    {% endif -%}

    # Handle disconnect
    http-request set-var(req.use_portal) str("{{conf.id}}") if workflow_{{conf.id}}_host { url_reg {{conf.disconnect_url}} }
    http-request set-path /vulture_disconnect if workflow_{{conf.id}}_host { url_reg {{conf.disconnect_url}} }
    # Handle self service
    http-request set-var(req.use_portal) str("{{conf.id}}") if workflow_{{conf.id}}_host { path -i -m beg {{conf.public_dir}}{{global_config.public_token}}/self }
    http-request replace-path {{conf.public_dir}}{{global_config.public_token}}/(.*) /\1 if workflow_{{conf.id}}_host { path -i -m beg {{conf.public_dir}}{{global_config.public_token}}/self }
    {% endif -%}


    ### ACCESS ###
    {%- if conf.defender_enabled %}
    ### Defender activated ###
    http-request deny if { var(sess.defender.status) -m int gt 0 }
    {%- endif %}

    {% if conf.authentication %}
    # Workflow {{conf.name}}
    # Check session with LUA
    http-request lua.check_session_from_cookie "{{ global_config.portal_cookie_name }}" "{{conf.id}}" {{conf.authentication.auth_timeout}} if workflow_{{conf.id}}_host workflow_{{conf.id}}_dir { req.cook({{ global_config.portal_cookie_name }}) -m found }
    http-request lua.check_session_from_header "Authorization" "{{conf.openid_client_ids | join(';')}}" 0 if workflow_{{conf.id}}_host workflow_{{conf.id}}_dir { req.hdr(Authorization) -m found }
    http-request lua.check_session_from_header "X-Vlt-Token" "{{conf.openid_client_ids | join(';')}}" 0 if workflow_{{conf.id}}_host workflow_{{conf.id}}_dir { req.hdr(X-Vlt-Token) -m found }
    # Return gateway timeout in case of authentication check failure
    http-request deny deny_status 504 if workflow_{{conf.id}}_host workflow_{{conf.id}}_dir request_has_authent !{ var(req.session.check_ok) -m found }
    # Deny access in case of header authentication failure (through 'Authentication' or 'X-Vlt-Token' headers)
    http-request deny deny_status 401 hdr WWW-Authenticate "Bearer realm=\"{{conf.fqdn}}\"" if workflow_{{conf.id}}_host workflow_{{conf.id}}_dir header_has_authent !{ var(req.session.authorized) -m bool } !{ var(req.use_portal) -m found } !auth_redirect_{{conf.id}}
    {%- endif %}
    {%- if conf.access_controls_302|length -%}
    ### 302 redirects ###
    {% for acl in conf.access_controls_302 -%}
    {# if acl.redirect -> redirect or redirect if the ACL matches #}
    {%- if acl.redirect %}
    {% for condition in acl.conditions -%}
    http-request redirect location {{ acl.redirect_url }} code 302 if { var(req.is_workflow) -m int eq {{conf.id}} } {{ condition }}
    {%- endfor %}
    {# if not acl.redirect -> redirect or redirect unless (if not) the ACL matches #}
    {%- else %}
    http-request redirect location {{ acl.redirect_url }} code 302 unless !{ var(req.is_workflow) -m int eq {{conf.id}} } || {{ acl.conditions | join(" || ") }}
    {%- endif %}
    {%- endfor -%}
    {%- endif %}
    {%- if conf.access_controls_301|length -%}
    ### 301 redirects ###
    {% for acl in conf.access_controls_301 %}
    {# if acl.redirect -> redirect or redirect if the ACL matches #}
    {%- if acl.redirect %}
    {% for condition in acl.conditions %}
    http-request redirect location {{ acl.redirect_url }} code 301 if { var(req.is_workflow) -m int eq {{conf.id}} } {{ condition }}
    {%- endfor %}
    {# if not acl.redirect -> redirect or redirect unless (if not) the ACL matches #}
    {%- else %}
    http-request redirect location {{ acl.redirect_url }} code 301 unless !{ var(req.is_workflow) -m int eq {{conf.id}} } || {{ acl.conditions | join(" || ") }}
    {%- endif %}
    {%- endfor -%}
    {%- endif %}


    ################
    ### BACKENDS ###
    ################

    {% if conf.authentication -%}
    # Portals
    use_backend portal_{{conf.id}} if !{ var(req.session.authorized) -m bool } workflow_{{conf.id}}_host workflow_{{conf.id}}_dir_auth
    use_backend portal_{{conf.id}} if { var(req.use_portal) -m str "{{conf.id}}" } # Can be further simplified with an ACL instead
    {% endif -%}

    # Backends
    {% if conf.mode == "tcp" %}default{% else %}use{% endif -%}
    _backend {{ conf.backend.name }}
        {%- if conf.mode == "http" %} if{% endif -%}
        {% if conf.mode == "http" %} workflow_{{ conf.id }}_host workflow_{{conf.id}}_dir{% endif %}


backend portal_{{ conf.id }}
    timeout connect 2s
    timeout server 20s
    mode http

    acl portal path -i -m beg /self
    acl portal path -i -m beg /oauth2/
    acl portal path /vulture_disconnect
    acl portal path -i -m beg /templates/
    acl oauth path -i -m beg /oauth2/
    acl template path -i -m beg /templates/
    acl cors_enabled var(txn.cors_enable) -m int eq 1
    acl favicon path /favicon.ico

    http-request deny deny_status 404 if favicon

    # Mandatory directives for authentication
    http-request add-header X-Forwarded-Proto http if ! { ssl_fc }
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    http-request set-var(txn.cors_enable) int(1) if oauth
    http-response add-header Access-Control-Allow-Origin "*" if cors_enabled

    http-request redirect code 307 location {{conf.public_dir}}?redirect_url=%[pathq,url_enc()] if !{ path {{conf.public_dir}} } !portal

    http-request set-path /portal/{{ conf.id }}%[path] unless template
    http-request set-path /portal/{{ conf.id }}/ if METH_POST !portal

    # Use portals' internal proxy load-balancer
    server portals unix@/var/sockets/haproxy/portals.sock



