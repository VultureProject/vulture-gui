import json
from datetime import datetime
from django.utils import timezone



class Malware:

    MALWARE_URI = "rest/malware/query"

    def __init__(self, instance: object) -> None:
        self.instance = instance

    def get_logs(self, since: datetime, to: datetime) -> (list, object, bool):
        malware_uri = f"{self.instance.host}/{self.MALWARE_URI}"

        query = {
            'filters': [{
                'fieldName': 'timestamp',
                'operator': 'GreaterThan',
                'values': [int(since.timestamp()) * 1000]
            },{
                'fieldName': 'timestamp',
                'operator': 'LessOrEqualsTo',
                'values': [int(to.timestamp()) * 1000]
            }],
            'limit': 1000,
            'offset': 0,
            'search': '',
            'sortDirection': 'DESC',
            'sortingFieldName': 'timestamp'
        }

        logs = []
        offset = 0
        has_more_logs = True
        last_timestamp = None
        # Get bulk of 1000 max logs
        while len(logs) < 1000 and not self.instance.evt_stop.is_set():
            ret = self.instance.execute_query("POST", malware_uri, query)
            if 'data' not in ret:
                has_more_logs = False
                break
            logs.extend(ret['data']['malwares'])
            if ret['status'] != 'SUCCESS' or not ret['data']['hasMoreResults']:
                has_more_logs = False
                break
            offset += 1
            query['offset'] = offset
        if logs:
            # Make sure logs are sorted by timestamps
            # ISO8601 timestamps are sortable as strings
            last_timestamp = max(log['timestamp'] for log in logs)
            last_timestamp = datetime.fromtimestamp(int(last_timestamp) / 1000, tz=timezone.utc)
        return logs, last_timestamp, has_more_logs

    def add_enrichment(self, alert: dict) -> dict:
        alert['id'] = alert['guid']
        alert['url'] = self.instance.host
        alert['kind'] = 'malwares'
        return alert

    @staticmethod
    def format_log(log: dict) -> str:
        log['original_timestamp'] = log.pop("timestamp")
        return json.dumps(log)
