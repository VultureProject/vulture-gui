#This file is part of Vulture OS.
#

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################


backend {{ conf.name }}
    {% if conf.enabled %}enabled {% else %}disabled {% endif %}

    mode {{ conf.mode }}

    timeout connect {{conf.timeout_connect}}ms
    timeout server {{conf.timeout_server}}s

    no log

    balance {{conf.balancing}}

    # Custom conf
    {{ conf.custom_haproxy_conf }}

    {% if conf.mode == "http" -%}
    # Remove body in logs if not 403 (for defender)
    http-response unset-var(sess.body) unless { status eq 403 }

    # HTTP Headers
    {% for header in conf.headers -%}
    {% if header.enabled -%}
    {{ header.generate_conf() }}
    {% endif %}
    {%- endfor %}

    {% if conf.accept_invalid_http_response -%}
    option accept-invalid-http-request
    {%- endif %}

    {% if conf.http_forwardfor_header -%}
    # Send request client IP in HTTP header
    option forwardfor {% if conf.http_forwardfor_except %}except {{conf.http_forwardfor_except}}{% endif -%}{% if conf.http_forwardfor_header %}header {{conf.http_forwardfor_header}}{% endif %}
    {%- endif %}

    # HTTP Health check
    {% if conf.enable_http_health_check -%}
    {%- if conf.http_health_check_version == "HTTP/2" -%}
    option httpchk
    http-check connect ssl alpn h2,http/1.1
    http-check send meth {{conf.http_health_check_method}} uri {{conf.http_health_check_uri}} ver {{conf.http_health_check_version}} {% for key, value in conf.http_health_check_headers.items() -%}hdr {{ key }} {{ value }} {% endfor %}
    {%- else -%}
    option httpchk {{conf.http_health_check_method}} {{conf.http_health_check_uri}} {{conf.http_health_check_version}}
    {%- for key, value in conf.http_health_check_headers.items() -%}
        {{ key }}:\ {{ value }}{%- if not loop.last %}\r\n{% endif %}
    {%- endfor %}
    {%- endif -%}
    {%- if conf.http_health_check_expect -%}
    http-check expect {{conf.http_health_check_expect}}
    {%- endif -%}
    {%- endif %}

    # Keep-Alive options
    {% if conf.enable_http_keep_alive -%}
    option http-keep-alive
    timeout http-keep-alive {{ conf.http_keep_alive_timeout }}
    {%- else -%}
    no option http-keep-alive
    {%- endif %}

    {% for acl in conf.access_controls_list %}
    {{ acl }}
    {% endfor %}

    {%- if conf.workflows -%}
    # Workflow ACLs
    {%- for workflow in conf.workflows %}
    acl workflow_{{workflow.id}}_host hdr(host) {{workflow.fqdn}}
    acl workflow_{{workflow.id}}_dir path -i -m beg {{workflow.public_dir}}
    {% endfor %}
    {%- for workflow in conf.workflows %}
    http-request set-var(req.is_workflow) int({{workflow.id}}) if workflow_{{workflow.id}}_host workflow_{{workflow.id}}_dir
    {% endfor -%}
    {%- endif %} {# if conf.workflows #}
    {% endif %} {# if mode http #}

    {% for workflow in conf.workflows -%}
    {# There are ACL only in http mode (tcp-request in not allowed in backend) #}
    {% if conf.mode == "http" -%}
    {%- if workflow.access_controls_deny|length -%}
    {% for acl in workflow.access_controls_deny %}
    {# if acl.deny -> deny or redirect if the ACL matches #}
    {%- if acl.deny %}
    {% for condition in acl.conditions %}
    http-request deny if { var(req.is_workflow) -m int eq {{workflow.id}} } {{ condition }}
    {% endfor %}
    {# if not acl.deny -> deny or redirect unless (if not) the ACL matches #}
    {%- else %}
    http-request deny unless !{ var(req.is_workflow) -m int eq {{workflow.id}} } || {{ acl.conditions | join(" || ") }}
    {%- endif %}
    {%- endfor -%}
    {% endif %} {# if workflow.access_controls_deny|length #}

    {%- if workflow.access_controls_302|length -%}
    {% for acl in workflow.access_controls_302 %}
    {# if acl.redirect -> redirect or redirect if the ACL matches #}
    {%- if acl.redirect %}
    {% for condition in acl.conditions %}
    http-request redirect location {{ acl.redirect_url }} code 302 if { var(req.is_workflow) -m int eq {{workflow.id}} } {{ condition }}
    {% endfor %}
    {# if not acl.redirect -> redirect or redirect unless (if not) the ACL matches #}
    {%- else %}
    http-request redirect location {{ acl.redirect_url }} code 302 unless !{ var(req.is_workflow) -m int eq {{workflow.id}} } || {{ acl.conditions | join(" || ") }}
    {%- endif %}
    {%- endfor -%}
    {% endif %} {# workflow.access_controls_302|length #}

    {%- if workflow.access_controls_301|length -%}
    {% for acl in workflow.access_controls_301 %}
    {# if acl.redirect -> redirect or redirect if the ACL matches #}
    {%- if acl.redirect %}
    {% for condition in acl.conditions %}
    http-request redirect location {{ acl.redirect_url }} code 301 if { var(req.is_workflow) -m int eq {{workflow.id}} } {{ condition }}
    {% endfor %} {# for condition in acl.conditions #}
    {# if not acl.redirect -> redirect or redirect unless (if not) the ACL matches #}
    {%- else %}
    http-request redirect location {{ acl.redirect_url }} code 301 unless !{ var(req.is_workflow) -m int eq {{workflow.id}} } || {{ acl.conditions | join(" || ") }}
    {%- endif %}
    {%- endfor -%} {# for acl in workflow.access_controls_301 #}
    {% endif %} {# workflow.access_controls_301|length #}
    {% endif %} {# if conf.mode == "http" #}
    {% endfor %} {# for workflow in conf.workflows #}

    {% if conf.mode == "http" and conf.http_backend_dir != "/" -%}
    http-request set-path {{conf.http_backend_dir}}%[path]
    {%- endif %}

    # Servers
    {%- for server in conf.servers %}
        {{ server.generate_conf() }} {%- if conf.enable_http_health_check %} check inter {{conf.http_health_check_interval}}s{% endif %}
    {%- endfor %}


