# Generated by Django 2.1.3 on 2019-04-01 07:58

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Backend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, help_text='Enable the backend')),
                ('name', models.TextField(default='Backend', help_text='Name of HAProxy backend', unique=True)),
                ('mode', models.TextField(choices=[('tcp', 'TCP'), ('http', 'HTTP')], default='tcp', help_text='Proxy mode')),
                ('timeout_connect', models.PositiveIntegerField(default=2000, help_text='HTTP request Timeout', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20000)], verbose_name='Timeout')),
                ('timeout_server', models.PositiveIntegerField(default=2000, help_text='HTTP request Timeout', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50000)], verbose_name='Timeout')),
                ('configuration', models.TextField(default='{}')),
                ('status', djongo.models.fields.JSONField(default={})),
                ('custom_haproxy_conf', models.TextField(default='', help_text='Custom HAProxy configuration directives.')),
                ('accept_invalid_http_response', models.BooleanField(default=False, help_text='Enable relaxing of HTTP response parsing', verbose_name='Accept invalid HTTP response')),
                ('http_forwardfor_header', models.TextField(blank=True, help_text='Insertion of the X-Forwarded-For header', null=True, verbose_name='Send source ip in ')),
                ('http_forwardfor_except', models.GenericIPAddressField(blank=True, help_text='Except the specified IP address', null=True, protocol='IPv4', verbose_name='Except for ')),
                ('enable_http_health_check', models.BooleanField(default=False, help_text='Enable HTTP protocol health checker', verbose_name='HTTP health check')),
                ('http_health_check_method', models.TextField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('PATCH', 'PATCH'), ('DELETE', 'DELETE')], default='GET', help_text='HTTP method used', verbose_name='Method')),
                ('http_health_check_uri', models.TextField(blank=True, default='/', help_text='URI referenced', null=True, verbose_name='URI')),
                ('http_health_check_version', models.TextField(choices=[('HTTP/1.0\\r\\n', 'HTTP/1.0'), ('HTTP/1.1\\r\\n', 'HTTP/1.1')], default='HTTP/1.0\\r\\n', help_text='HTTP version', verbose_name='Version')),
                ('http_health_check_headers', djongo.models.fields.JSONField(default={}, help_text='HTTP Health Check Headers', verbose_name='HTTP Health Check Headers')),
                ('http_health_check_expect_match', models.TextField(choices=[('status', 'Status code is'), ('rstatus', 'Status code match regex'), ('string', 'Response content contains'), ('rstring', 'Response content match regex'), ('! status', 'Status code different'), ('! rstatus', 'Status code does not match regex'), ('! string', 'Response content does not contain'), ('! rstring', 'Response content does not match regex')], default='status', help_text='Type of match to expect', null=True, verbose_name='HTTP Health Check expected')),
                ('http_health_check_expect_pattern', models.TextField(default='200', help_text='Type of pattern to match to expect', verbose_name='HTTP Health Check expected pattern')),
                ('enable_http_keep_alive', models.BooleanField(default=True, help_text='Enable HTTP keep-alive', verbose_name='HTTP Keep alive')),
                ('http_keep_alive_timeout', models.PositiveIntegerField(default=60, help_text='HTTP request Timeout', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20000)], verbose_name='Timeout')),
                ('balancing_mode', models.TextField(choices=[('roundrobin', 'RoundRobin'), ('static-rr', 'Static RoundRobin'), ('leastconn', 'Least Conn'), ('first', 'First server'), ('source', 'Source IP based'), ('uri', 'URI based'), ('url_param', 'URL param based'), ('hdr', 'Header based'), ('rdp-cookie', 'Cookie based')], default='roundrobin', help_text='Balancing mode between servers', verbose_name='Balancing mode')),
                ('balancing_param', models.TextField(default='', help_text='Balancing param for balancing mode', null=True, verbose_name='Balancing parameter')),
                ('tags', djongo.models.fields.JSONField(default=[], help_text='Tags to set on this object for search', verbose_name=models.SlugField(default=''))),
            ],
        ),
        migrations.CreateModel(
            name='LogOM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='Log Output Module', help_text='Name of the Log Output Module', unique=True)),
                ('internal', models.BooleanField(default=False, help_text='Is this LogForwarder internal')),
            ],
        ),
        migrations.CreateModel(
            name='portalTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Friendly name to reference the template')),
                ('css', models.TextField(help_text='Cascading Style Sheet for template')),
                ('html_login', models.TextField(help_text='HTML Content for the login page')),
                ('html_learning', models.TextField(default='', help_text='HTML Content for the learning page', null=True)),
                ('html_logout', models.TextField(default='', help_text='HTML Content for the logout page', null=True)),
                ('html_self', models.TextField(default='', help_text='HTML Content for the self-service page', null=True)),
                ('html_password', models.TextField(default='', help_text='HTML Content for the password change page', null=True)),
                ('html_otp', models.TextField(default='', help_text='HTML Content for the otp page', null=True)),
                ('html_message', models.TextField(default='', help_text='HTML Content for the message page', null=True)),
                ('html_error', models.TextField(default='', help_text='HTML General content for error pages', null=True)),
                ('html_registration', models.TextField(default='', help_text='HTML Content for registration pages', null=True)),
                ('html_error_403', models.TextField(default='403 Forbidden', help_text='HTML message for 403 Forbidden error', null=True)),
                ('html_error_404', models.TextField(default='404 Not Found', help_text='HTML message for 404 Not Found error', null=True)),
                ('html_error_405', models.TextField(default='405 Method Not Allowed', help_text='HTML message for 405 Method Not Allowed error', null=True)),
                ('html_error_406', models.TextField(default='406 Not Acceptable', help_text='HTML message for 406 Not Acceptable error', null=True)),
                ('html_error_500', models.TextField(default='500 Server Error', help_text='HTML message for 500 Server Error error', null=True)),
                ('html_error_501', models.TextField(default='501 Not Implemented', help_text='HTML message for 501 Not Implemented error', null=True)),
                ('html_error_502', models.TextField(default='502 Bad Gateway', help_text='HTML message for 502 Bad Gateway / Proxy error', null=True)),
                ('html_error_503', models.TextField(default='503 Service Unavailable', help_text='HTML message for 503 Service Unavailable error', null=True)),
                ('html_error_504', models.TextField(default='504 Gateway Time-out', help_text='HTML message for 504 Gateway Time-out error', null=True)),
                ('email_subject', models.TextField(default='', help_text='Email subject for password reset', null=True)),
                ('email_body', models.TextField(default='', help_text='Email content for password reset', null=True)),
                ('email_from', models.TextField(default='', help_text='Email "From" for password reset', null=True)),
                ('error_password_change_ok', models.TextField(default='', help_text='Your password has been changed', null=True)),
                ('error_password_change_ko', models.TextField(default='', help_text='Error when trying to change your password', null=True)),
                ('error_email_sent', models.TextField(default='', help_text='An email has been sent to you with instruction to reset your password', null=True)),
                ('images', djongo.models.fields.JSONField(default=[], help_text='Images you can use in your templates', verbose_name=models.ImageField(null=True, upload_to=''))),
                ('email_register_subject', models.TextField(default='', help_text='Email subject for registration', null=True)),
                ('email_register_from', models.TextField(default='', help_text='Email content for registration', null=True)),
                ('email_register_body', models.TextField(default='', help_text='Email sender for registration', null=True)),
                ('login_login_field', models.TextField(default='Login', help_text='Login field for the log-in page', null=True)),
                ('login_password_field', models.TextField(default='Password', help_text='Password field for the log-in page', null=True)),
                ('login_captcha_field', models.TextField(default='Captcha', help_text='Captcha field for the log-in page', null=True)),
                ('login_submit_field', models.TextField(default='Sign in', help_text='Submit field for the log-in page', null=True)),
                ('learning_submit_field', models.TextField(default='Save', help_text='Submit field for the learning page', null=True)),
                ('password_old_field', models.TextField(default='Old password', help_text='Old password field for the password page', null=True)),
                ('password_new1_field', models.TextField(default='New password', help_text='New password field for the password page', null=True)),
                ('password_new2_field', models.TextField(default='Confirmation', help_text='Confirmation password field for the password page', null=True)),
                ('password_email_field', models.TextField(default='Email', help_text='Email field for the password page', null=True)),
                ('password_submit_field', models.TextField(default='OK', help_text='Submit field for the password page', null=True)),
                ('otp_key_field', models.TextField(default='Key', help_text='OTP Key field for the OTP page', null=True)),
                ('otp_submit_field', models.TextField(default='Sign in', help_text='Submit field for the OTP page', null=True)),
                ('otp_resend_field', models.TextField(default='Resend', help_text='Resend field for the OTP page', null=True)),
                ('otp_onetouch_field', models.TextField(default="<p>Please approve the OneTouch request on your phone, and click on 'Sign in'</p>", help_text='Onetouch message for the OTP page', null=True)),
                ('register_captcha_field', models.TextField(default='Captcha', help_text='Captcha field for the registration page', null=True)),
                ('register_username_field', models.TextField(default='Username', help_text='Username field for the registration page', null=True)),
                ('register_phone_field', models.TextField(default='Phone number', help_text='Phone field for the registration page', null=True)),
                ('register_password1_field', models.TextField(default='Password', help_text='Password field for the registration page', null=True)),
                ('register_password2_field', models.TextField(default='Password confirmation', help_text='Password confirmation field for the registration page', null=True)),
                ('register_email_field', models.TextField(default='Email', help_text='Email field for the registration page', null=True)),
                ('register_submit_field', models.TextField(default='Register', help_text='Password confirmation field for the registration page', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReputationContext',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='Reputation context', help_text='Custom name of the current object', unique=True, verbose_name='Friendly name')),
                ('db_type', models.TextField(choices=[('ipv4_mmdb', 'IPv4 MMDB'), ('ipv6_mmdb', 'IPv6 MMDB'), ('ipv4-6_mmdb', 'IPv4/6 Netset'), ('ipv4_netset', 'IPv4 Netset'), ('ipv6_netset', 'IPv6 Netset'), ('ipv4-6_netset', 'IPv4/6 Netset'), ('host', 'Hostnames')], default='ipv4_mmdb', help_text='Type of database', verbose_name='Database type')),
                ('method', models.SlugField(choices=[('GET', 'GET'), ('POST', 'POST')], default='GET', help_text='HTTP method to use while retrieving url', verbose_name='HTTP method to use')),
                ('url', models.URLField(help_text='URL to retrieve the database from', verbose_name='Database URL')),
                ('verify_cert', models.BooleanField(default=True, help_text='Verify certificate to prevent connexion to self-signed certificates.', verbose_name='Verify server certificate')),
                ('post_data', models.TextField(default='', help_text='Body to send if method is POST', null=True, verbose_name='POST body')),
                ('custom_headers', djongo.models.fields.JSONField(default={}, help_text='Headers to send while retrieving url', verbose_name='Custom headers')),
                ('auth_type', models.TextField(choices=[('', 'No authentication'), ('basic', 'Basic'), ('digest', 'Digest')], default='', help_text='Authentication type used to retrieve url', verbose_name='Authentication')),
                ('user', models.SlugField(default=None, help_text='Username to use for authentication', null=True, verbose_name='Username')),
                ('password', models.TextField(default=None, help_text='Password to use for authentication', null=True, verbose_name='Password')),
                ('tags', djongo.models.fields.JSONField(default=[], help_text='Tags to set on this object for search', verbose_name=models.SlugField(default=''))),
                ('content', models.BinaryField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.TextField(default='1.2.3.4', help_text='IP address/hostname of server')),
                ('port', models.PositiveIntegerField(default=80, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('weight', models.PositiveIntegerField(default=1, help_text='', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(256)])),
                ('backend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='applications.Backend')),
            ],
        ),
        migrations.CreateModel(
            name='TemplateImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='The name of the image')),
                ('content', models.ImageField(help_text='Image you can use in the portal templates', upload_to='')),
                ('uid', models.TextField(help_text='A unique identifier to get the image from portal', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LogOMElasticSearch',
            fields=[
                ('logom_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='applications.LogOM')),
                ('index_pattern', models.TextField(default='MyLog-YYYY.MM.DD', unique=True)),
                ('servers', models.TextField(default='["https://els-1:9200", "https://els-2:9200"]')),
                ('uid', models.TextField(blank=True, default=None, null=True)),
                ('pwd', models.TextField(blank=True, default=None, null=True)),
                ('enabled', models.BooleanField(default=True)),
            ],
            bases=('applications.logom',),
        ),
        migrations.CreateModel(
            name='LogOMFile',
            fields=[
                ('logom_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='applications.LogOM')),
                ('file', models.TextField()),
                ('flush_interval', models.IntegerField(default=1)),
                ('async_writing', models.BooleanField(default=True)),
                ('enabled', models.BooleanField(default=True)),
            ],
            bases=('applications.logom',),
        ),
        migrations.CreateModel(
            name='LogOMFWD',
            fields=[
                ('logom_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='applications.LogOM')),
                ('target', models.TextField(default='1.2.3.4')),
                ('port', models.IntegerField(default=514, help_text='Port on which to send logs to <target>.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('protocol', models.TextField(choices=[('tcp', 'TCP'), ('udp', 'UDP')], default='tcp')),
                ('enabled', models.BooleanField(default=True)),
                ('zip_level', models.PositiveIntegerField(default=0, help_text='Compression level for messages.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
            ],
            bases=('applications.logom',),
        ),
        migrations.CreateModel(
            name='LogOMHIREDIS',
            fields=[
                ('logom_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='applications.LogOM')),
                ('target', models.TextField(default='1.2.3.4')),
                ('port', models.IntegerField(default=6379)),
                ('key', models.TextField(default='MyKey')),
                ('pwd', models.TextField(blank=True, default=None)),
                ('enabled', models.BooleanField(default=True)),
            ],
            bases=('applications.logom',),
        ),
        migrations.CreateModel(
            name='LogOMMongoDB',
            fields=[
                ('logom_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='applications.LogOM')),
                ('db', models.TextField(default='MyDatabase', unique=True)),
                ('collection', models.TextField(default='MyLogs', unique=True)),
                ('uristr', models.TextField(default='mongodb://1.2.3.4:9091/?replicaset=Vulture&ssl=true')),
                ('enabled', models.BooleanField(default=True)),
            ],
            bases=('applications.logom',),
        ),
        migrations.CreateModel(
            name='LogOMRELP',
            fields=[
                ('logom_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='applications.LogOM')),
                ('target', models.TextField(default='1.2.3.4')),
                ('port', models.IntegerField(default=514)),
                ('enabled', models.BooleanField(default=True)),
                ('tls_enabled', models.BooleanField(default=True, help_text='If set to on, the RELP connection will be encrypted by TLS.')),
            ],
            bases=('applications.logom',),
        ),
    ]
