# Generated by Django 4.2.11 on 2025-06-02 08:10

from django.db import migrations, models
import django.db.models.deletion


existing_certificates = {}
new_profiles = {}


def save_x509_certificate(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    logomelasticsearch_model = apps.get_model("applications", "logomelasticsearch")
    logomelasticsearch = logomelasticsearch_model.objects.using(db_alias)

    for logom in logomelasticsearch.filter(x509_certificate__isnull=False):
        existing_certificates[logom.id] = logom.x509_certificate


def create_tls_profile(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    tls_profile_model = apps.get_model("system", "tlsprofile")
    tls_profile = tls_profile_model.objects.using(db_alias)

    for id, certificate in existing_certificates.items():
        if certificate.is_ca:
            if not tls_profile.filter(verify_client__in=["required", "optional"], ca_cert=certificate).exists():
                new_profiles[id] = tls_profile.create(
                    name=f"TLS Profile {certificate.name}",
                    verify_client="required",
                    ca_cert=certificate,
                )
            else:
                new_profiles[id] = tls_profile.filter(verify_client__in=["required", "optional"], ca_cert=certificate).last()
        else:
            if not tls_profile.filter(x509_certificate=certificate).exists():
                new_profiles[id] = tls_profile.create(
                    name=f"TLS Profile {certificate.name}",
                    x509_certificate=certificate,
                )
            else:
                new_profiles[id] = tls_profile.filter(x509_certificate=certificate).last()


def inject_tls_profile(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    logomelasticsearch_model = apps.get_model("applications", "logomelasticsearch")
    logomelasticsearch = logomelasticsearch_model.objects.using(db_alias)
    tls_profile_model = apps.get_model("system", "tlsprofile")
    tls_profile = tls_profile_model.objects.using(db_alias)

    for logom in logomelasticsearch.all():
        if logom.id in new_profiles:
            tls = tls_profile.get(pk=new_profiles[logom.id].pk)
            # inject the new tls_profile
            logom.tls_profile = tls
            logom.save()


class Migration(migrations.Migration):

    dependencies = [
        ('applications', '0025_auto_20241210_1046'),
    ]

    operations = [
        migrations.RunPython(save_x509_certificate, migrations.RunPython.noop),
        migrations.RunPython(create_tls_profile, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name='logomelasticsearch',
            name='x509_certificate',
        ),
        migrations.AddField(
            model_name='logomelasticsearch',
            name='tls_profile',
            field=models.ForeignKey(blank=True, default=None, help_text='TLSProfile object to use.', null=True, on_delete=django.db.models.deletion.CASCADE, to='system.tlsprofile', verbose_name='Use a TLS Profile'),
        ),
        migrations.RunPython(inject_tls_profile, migrations.RunPython.noop),
    ]
