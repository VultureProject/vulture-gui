# Generated by Django 4.2.23 on 2025-08-18 14:34

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djongo.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('system', '0028_alter_tlsprofile_ca_cert_and_more'),
        ('applications', '0026_remove_logomelasticsearch_x509_certificate_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='LogOMSentinel',
            fields=[
                ('logom_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='applications.logom')),
                ('tenant_id', models.TextField(default=None, help_text='the ID of the tenant to use, will be included in the URI', validators=[django.core.validators.RegexValidator(message='The tenant ID format is not a valid', regex='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$')], verbose_name='Tenant ID')),
                ('client_id', models.TextField(default=None, help_text='the client ID for OpenID application authentication', validators=[django.core.validators.RegexValidator(message='The client ID format is not a valid', regex='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$')], verbose_name='Client ID')),
                ('client_secret', models.TextField(default=None, help_text='the client secret for OpenID application authentication', verbose_name='Client Secret')),
                ('dcr', models.TextField(default=None, help_text='The Sentinel Data Collection Rule to use while ingesting data', validators=[django.core.validators.RegexValidator(message='The DCR ID is not valid (expected format : dcr-cbb3586665ebdbc6ebadd796e3ba5bcf).', regex='^dcr-[0-9a-f]{32}$')], verbose_name='Data Collection Rule')),
                ('dce', models.TextField(default=None, help_text='The Sentinel Data Collection Endpoint to use for ingestion', verbose_name='Data Collection Endpoint')),
                ('stream_name', models.TextField(default=None, help_text='The Sentinel stream on which to insert the logs', verbose_name='Stream Name')),
                ('scope', models.URLField(default='https://monitor.azure.com/.default', help_text='the OpenID scope to use. For Sentinel ingestion API, corresponds to the Azure Environment', verbose_name='Scope')),
                ('batch_maxsize', models.PositiveIntegerField(default=100, help_text='Controls how many messages should be sent at most in one request', verbose_name='Batch max size')),
                ('batch_maxbytes', models.PositiveIntegerField(default=10485760, help_text='Defines the maximum size (in bytes) of one request', verbose_name='Batch max bytes')),
                ('compression_level', models.IntegerField(choices=[(-1, 'Balanced'), (0, 'No compression'), (1, 'Fastest compression'), (2, 'Compression level 2'), (3, 'Compression level 3'), (4, 'Compression level 4'), (5, 'Compression level 5'), (6, 'Compression level 6'), (7, 'Compression level 7'), (8, 'Compression level 8'), (9, 'Best compression')], default=-1, help_text='Activates and defines the level of compression of requests', validators=[django.core.validators.MinValueValidator(-1, message='Minimum allowed value is -1 (Balanced).'), django.core.validators.MaxValueValidator(9, message='Maximum allowed value is 9. (Best compression)')], verbose_name='Compression level')),
                ('use_proxy', models.BooleanField(default=False, help_text='Use a proxy to connect to the OMSentinel APIs', verbose_name='Use Proxy')),
                ('custom_proxy', models.TextField(blank=True, default=None, help_text='Custom proxy to use (will use system proxy if not set)', null=True, verbose_name='Custom Proxy')),
                ('tls_profile', models.ForeignKey(blank=True, default=None, help_text='TLSProfile object to use.', null=True, on_delete=django.db.models.deletion.RESTRICT, to='system.tlsprofile', verbose_name='Use a TLS Profile')),
            ],
            bases=('applications.logom',),
        ),

    ]
